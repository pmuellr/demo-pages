{"date":1485029999011,"type":"info","dateString":"2017-01-21T20:19:59.011Z","target":{"date":1485029998886,"args":["/usr/local/bin/node","/Users/pmuellr/Projects/playbug/samples/left-pad.js"],"nodeVersion":"v6.9.2","platform":"darwin/x64"},"generator":{"program":"playbug","version":"0.0.1","nodeVersion":"v6.9.2","platform":"darwin/x64"}}
{"type":"script","id":"60","url":"/Users/pmuellr/Projects/playbug/samples/left-pad.js","endLine":24,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { \n\n'use strict'\n\nsetInterval(onInterval, 1000)\n\nfunction onInterval () {\n  const time = new Date().toISOString().substr(11, 8)\n  const padded = leftPad(time, 12)\n  console.log(`time: ${padded}`)\n}\n\nfunction leftPad (s, len) {\n  if (s == null) return null\n\n  s = `${s}`\n\n  while (s.length < len) {\n    s = ` ${s}`\n  }\n\n  return s\n}\n\n});"}
{"type":"script","id":"40","url":"timers.js","endLine":718,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst TimerWrap = process.binding('timer_wrap').Timer;\nconst L = require('internal/linkedlist');\nconst assert = require('assert');\nconst util = require('util');\nconst debug = util.debuglog('timer');\nconst kOnTimeout = TimerWrap.kOnTimeout | 0;\n\n// Timeout values > TIMEOUT_MAX are set to 1.\nconst TIMEOUT_MAX = 2147483647; // 2^31-1\n\n\n// HOW and WHY the timers implementation works the way it does.\n//\n// Timers are crucial to Node.js. Internally, any TCP I/O connection creates a\n// timer so that we can time out of connections. Additionally, many user\n// user libraries and applications also use timers. As such there may be a\n// significantly large amount of timeouts scheduled at any given time.\n// Therefore, it is very important that the timers implementation is performant\n// and efficient.\n//\n// Note: It is suggested you first read though the lib/internal/linkedlist.js\n// linked list implementation, since timers depend on it extensively. It can be\n// somewhat counter-intuitive at first, as it is not actually a class. Instead,\n// it is a set of helpers that operate on an existing object.\n//\n// In order to be as performant as possible, the architecture and data\n// structures are designed so that they are optimized to handle the following\n// use cases as efficiently as possible:\n\n// - Adding a new timer. (insert)\n// - Removing an existing timer. (remove)\n// - Handling a timer timing out. (timeout)\n//\n// Whenever possible, the implementation tries to make the complexity of these\n// operations as close to constant-time as possible.\n// (So that performance is not impacted by the number of scheduled timers.)\n//\n// Object maps are kept which contain linked lists keyed by their duration in\n// milliseconds.\n// The linked lists within also have some meta-properties, one of which is a\n// TimerWrap C++ handle, which makes the call after the duration to process the\n// list it is attached to.\n//\n//\n// ╔════ > Object Map\n// ║\n// ╠══\n// ║ refedLists: { '40': { }, '320': { etc } } (keys of millisecond duration)\n// ╚══          ┌─────────┘\n//              │\n// ╔══          │\n// ║ TimersList { _idleNext: { }, _idlePrev: (self), _timer: (TimerWrap) }\n// ║         ┌────────────────┘\n// ║    ╔══  │                              ^\n// ║    ║    { _idleNext: { },  _idlePrev: { }, _onTimeout: (callback) }\n// ║    ║      ┌───────────┘\n// ║    ║      │                                  ^\n// ║    ║      { _idleNext: { etc },  _idlePrev: { }, _onTimeout: (callback) }\n// ╠══  ╠══\n// ║    ║\n// ║    ╚════ >  Actual JavaScript timeouts\n// ║\n// ╚════ > Linked List\n//\n//\n// With this, virtually constant-time insertion (append), removal, and timeout\n// is possible in the JavaScript layer. Any one list of timers is able to be\n// sorted by just appending to it because all timers within share the same\n// duration. Therefore, any timer added later will always have been scheduled to\n// timeout later, thus only needing to be appended.\n// Removal from an object-property linked list is also virtually constant-time\n// as can be seen in the lib/internal/linkedlist.js implementation.\n// Timeouts only need to process any timers due to currently timeout, which will\n// always be at the beginning of the list for reasons stated above. Any timers\n// after the first one encountered that does not yet need to timeout will also\n// always be due to timeout at a later time.\n//\n// Less-than constant time operations are thus contained in two places:\n// TimerWrap's backing libuv timers implementation (a performant heap-based\n// queue), and the object map lookup of a specific list by the duration of\n// timers within (or creation of a new list).\n// However, these operations combined have shown to be trivial in comparison to\n// other alternative timers architectures.\n\n\n// Object maps containing linked lists of timers, keyed and sorted by their\n// duration in milliseconds.\n//\n// The difference between these two objects is that the former contains timers\n// that will keep the process open if they are the only thing left, while the\n// latter will not.\n//\n// - key = time in milliseconds\n// - value = linked list\nconst refedLists = Object.create(null);\nconst unrefedLists = Object.create(null);\n\n\n// Schedule or re-schedule a timer.\n// The item must have been enroll()'d first.\nconst active = exports.active = function(item) {\n  insert(item, false);\n};\n\n// Internal APIs that need timeouts should use `_unrefActive()` instead of\n// `active()` so that they do not unnecessarily keep the process open.\nexports._unrefActive = function(item) {\n  insert(item, true);\n};\n\n\n// The underlying logic for scheduling or re-scheduling a timer.\n//\n// Appends a timer onto the end of an existing timers list, or creates a new\n// TimerWrap backed list if one does not already exist for the specified timeout\n// duration.\nfunction insert(item, unrefed) {\n  const msecs = item._idleTimeout;\n  if (msecs < 0 || msecs === undefined) return;\n\n  item._idleStart = TimerWrap.now();\n\n  const lists = unrefed === true ? unrefedLists : refedLists;\n\n  // Use an existing list if there is one, otherwise we need to make a new one.\n  var list = lists[msecs];\n  if (!list) {\n    debug('no %d list was found in insert, creating a new one', msecs);\n    lists[msecs] = list = createTimersList(msecs, unrefed);\n  }\n\n  L.append(list, item);\n  assert(!L.isEmpty(list)); // list is not empty\n}\n\nfunction createTimersList(msecs, unrefed) {\n  // Make a new linked list of timers, and create a TimerWrap to schedule\n  // processing for the list.\n  const list = new TimersList(msecs, unrefed);\n  L.init(list);\n  list._timer._list = list;\n\n  if (unrefed === true) list._timer.unref();\n  list._timer.start(msecs);\n\n  list._timer[kOnTimeout] = listOnTimeout;\n\n  return list;\n}\n\nfunction TimersList(msecs, unrefed) {\n  this._idleNext = null; // Create the list with the linkedlist properties to\n  this._idlePrev = null; // prevent any unnecessary hidden class changes.\n  this._timer = new TimerWrap();\n  this._unrefed = unrefed;\n  this.msecs = msecs;\n}\n\nfunction listOnTimeout() {\n  var list = this._list;\n  var msecs = list.msecs;\n\n  debug('timeout callback %d', msecs);\n\n  var now = TimerWrap.now();\n  debug('now: %d', now);\n\n  var diff, timer;\n  while (timer = L.peek(list)) {\n    diff = now - timer._idleStart;\n\n    // Check if this loop iteration is too early for the next timer.\n    // This happens if there are more timers scheduled for later in the list.\n    if (diff < msecs) {\n      var timeRemaining = msecs - (TimerWrap.now() - timer._idleStart);\n      if (timeRemaining < 0) {\n        timeRemaining = 0;\n      }\n      this.start(timeRemaining);\n      debug('%d list wait because diff is %d', msecs, diff);\n      return;\n    }\n\n    // The actual logic for when a timeout happens.\n\n    L.remove(timer);\n    assert(timer !== L.peek(list));\n\n    if (!timer._onTimeout) continue;\n\n    var domain = timer.domain;\n    if (domain) {\n\n      // If the timer callback throws and the\n      // domain or uncaughtException handler ignore the exception,\n      // other timers that expire on this tick should still run.\n      //\n      // https://github.com/nodejs/node-v0.x-archive/issues/2631\n      if (domain._disposed)\n        continue;\n\n      domain.enter();\n    }\n\n    tryOnTimeout(timer, list);\n\n    if (domain)\n      domain.exit();\n  }\n\n  // If `L.peek(list)` returned nothing, the list was either empty or we have\n  // called all of the timer timeouts.\n  // As such, we can remove the list and clean up the TimerWrap C++ handle.\n  debug('%d list empty', msecs);\n  assert(L.isEmpty(list));\n  this.close();\n\n  // Either refedLists[msecs] or unrefedLists[msecs] may have been removed and\n  // recreated since the reference to `list` was created. Make sure they're\n  // the same instance of the list before destroying.\n  if (list._unrefed === true && list === unrefedLists[msecs]) {\n    delete unrefedLists[msecs];\n  } else if (list === refedLists[msecs]) {\n    delete refedLists[msecs];\n  }\n}\n\n\n// An optimization so that the try/finally only de-optimizes (since at least v8\n// 4.7) what is in this smaller function.\nfunction tryOnTimeout(timer, list) {\n  timer._called = true;\n  var threw = true;\n  try {\n    ontimeout(timer);\n    threw = false;\n  } finally {\n    if (!threw) return;\n\n    // We need to continue processing after domain error handling\n    // is complete, but not by using whatever domain was left over\n    // when the timeout threw its exception.\n    const domain = process.domain;\n    process.domain = null;\n    // If we threw, we need to process the rest of the list in nextTick.\n    process.nextTick(listOnTimeoutNT, list);\n    process.domain = domain;\n  }\n}\n\n\nfunction listOnTimeoutNT(list) {\n  list._timer[kOnTimeout]();\n}\n\n\n// A convenience function for re-using TimerWrap handles more easily.\n//\n// This mostly exists to fix https://github.com/nodejs/node/issues/1264.\n// Handles in libuv take at least one `uv_run` to be registered as unreferenced.\n// Re-using an existing handle allows us to skip that, so that a second `uv_run`\n// will return no active handles, even when running `setTimeout(fn).unref()`.\nfunction reuse(item) {\n  L.remove(item);\n\n  var list = refedLists[item._idleTimeout];\n  // if empty - reuse the watcher\n  if (list && L.isEmpty(list)) {\n    debug('reuse hit');\n    list._timer.stop();\n    delete refedLists[item._idleTimeout];\n    return list._timer;\n  }\n\n  return null;\n}\n\n\n// Remove a timer. Cancels the timeout and resets the relevant timer properties.\nconst unenroll = exports.unenroll = function(item) {\n  var handle = reuse(item);\n  if (handle) {\n    debug('unenroll: list empty');\n    handle.close();\n  }\n  // if active is called later, then we want to make sure not to insert again\n  item._idleTimeout = -1;\n};\n\n\n// Make a regular object able to act as a timer by setting some properties.\n// This function does not start the timer, see `active()`.\n// Using existing objects as timers slightly reduces object overhead.\nexports.enroll = function(item, msecs) {\n  if (typeof msecs !== 'number') {\n    throw new TypeError('\"msecs\" argument must be a number');\n  }\n\n  if (msecs < 0 || !isFinite(msecs)) {\n    throw new RangeError('\"msecs\" argument must be ' +\n                         'a non-negative finite number');\n  }\n\n  // if this item was already in a list somewhere\n  // then we should unenroll it from that\n  if (item._idleNext) unenroll(item);\n\n  // Ensure that msecs fits into signed int32\n  if (msecs > TIMEOUT_MAX) {\n    msecs = TIMEOUT_MAX;\n  }\n\n  item._idleTimeout = msecs;\n  L.init(item);\n};\n\n\n/*\n * DOM-style timers\n */\n\n\nexports.setTimeout = function(callback, after, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n\n  var len = arguments.length;\n  var args;\n  if (len === 3) {\n    args = [arg1];\n  } else if (len === 4) {\n    args = [arg1, arg2];\n  } else if (len > 4) {\n    args = [arg1, arg2, arg3];\n    for (var i = 5; i < len; i++)\n      // extend array dynamically, makes .apply run much faster in v6.0.0\n      args[i - 2] = arguments[i];\n  }\n\n  return createSingleTimeout(callback, after, args);\n};\n\nfunction createSingleTimeout(callback, after, args) {\n  after *= 1; // coalesce to number or NaN\n  if (!(after >= 1 && after <= TIMEOUT_MAX))\n    after = 1; // schedule on next tick, follows browser behaviour\n\n  var timer = new Timeout(after, callback, args);\n  if (process.domain)\n    timer.domain = process.domain;\n\n  active(timer);\n\n  return timer;\n}\n\n\nfunction ontimeout(timer) {\n  var args = timer._timerArgs;\n  var callback = timer._onTimeout;\n  if (!args)\n    callback.call(timer);\n  else {\n    switch (args.length) {\n      case 1:\n        callback.call(timer, args[0]);\n        break;\n      case 2:\n        callback.call(timer, args[0], args[1]);\n        break;\n      case 3:\n        callback.call(timer, args[0], args[1], args[2]);\n        break;\n      default:\n        callback.apply(timer, args);\n    }\n  }\n  if (timer._repeat)\n    rearm(timer);\n}\n\n\nfunction rearm(timer) {\n  // If timer is unref'd (or was - it's permanently removed from the list.)\n  if (timer._handle && timer instanceof Timeout) {\n    timer._handle.start(timer._repeat);\n  } else {\n    timer._idleTimeout = timer._repeat;\n    active(timer);\n  }\n}\n\n\nconst clearTimeout = exports.clearTimeout = function(timer) {\n  if (timer && (timer[kOnTimeout] || timer._onTimeout)) {\n    timer[kOnTimeout] = timer._onTimeout = null;\n    if (timer instanceof Timeout) {\n      timer.close(); // for after === 0\n    } else {\n      unenroll(timer);\n    }\n  }\n};\n\n\nexports.setInterval = function(callback, repeat, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n\n  var len = arguments.length;\n  var args;\n  if (len === 3) {\n    args = [arg1];\n  } else if (len === 4) {\n    args = [arg1, arg2];\n  } else if (len > 4) {\n    args = [arg1, arg2, arg3];\n    for (var i = 5; i < len; i++)\n      // extend array dynamically, makes .apply run much faster in v6.0.0\n      args[i - 2] = arguments[i];\n  }\n\n  return createRepeatTimeout(callback, repeat, args);\n};\n\nfunction createRepeatTimeout(callback, repeat, args) {\n  repeat *= 1; // coalesce to number or NaN\n  if (!(repeat >= 1 && repeat <= TIMEOUT_MAX))\n    repeat = 1; // schedule on next tick, follows browser behaviour\n\n  var timer = new Timeout(repeat, callback, args);\n  timer._repeat = repeat;\n  if (process.domain)\n    timer.domain = process.domain;\n\n  active(timer);\n\n  return timer;\n}\n\nexports.clearInterval = function(timer) {\n  if (timer && timer._repeat) {\n    timer._repeat = null;\n    clearTimeout(timer);\n  }\n};\n\n\nfunction Timeout(after, callback, args) {\n  this._called = false;\n  this._idleTimeout = after;\n  this._idlePrev = this;\n  this._idleNext = this;\n  this._idleStart = null;\n  this._onTimeout = callback;\n  this._timerArgs = args;\n  this._repeat = null;\n}\n\n\nfunction unrefdHandle() {\n  ontimeout(this.owner);\n  if (!this.owner._repeat)\n    this.owner.close();\n}\n\n\nTimeout.prototype.unref = function() {\n  if (this._handle) {\n    this._handle.unref();\n  } else if (typeof this._onTimeout === 'function') {\n    var now = TimerWrap.now();\n    if (!this._idleStart) this._idleStart = now;\n    var delay = this._idleStart + this._idleTimeout - now;\n    if (delay < 0) delay = 0;\n\n    // Prevent running cb again when unref() is called during the same cb\n    if (this._called && !this._repeat) {\n      unenroll(this);\n      return;\n    }\n\n    var handle = reuse(this);\n\n    this._handle = handle || new TimerWrap();\n    this._handle.owner = this;\n    this._handle[kOnTimeout] = unrefdHandle;\n    this._handle.start(delay);\n    this._handle.domain = this.domain;\n    this._handle.unref();\n  }\n  return this;\n};\n\nTimeout.prototype.ref = function() {\n  if (this._handle)\n    this._handle.ref();\n  return this;\n};\n\nTimeout.prototype.close = function() {\n  this._onTimeout = null;\n  if (this._handle) {\n    this._handle[kOnTimeout] = null;\n    this._handle.close();\n  } else {\n    unenroll(this);\n  }\n  return this;\n};\n\n\n// A linked list for storing `setImmediate()` requests\nfunction ImmediateList() {\n  this.head = null;\n  this.tail = null;\n}\n\n// Appends an item to the end of the linked list, adjusting the current tail's\n// previous and next pointers where applicable\nImmediateList.prototype.append = function(item) {\n  if (this.tail) {\n    this.tail._idleNext = item;\n    item._idlePrev = this.tail;\n  } else {\n    this.head = item;\n  }\n  this.tail = item;\n};\n\n// Removes an item from the linked list, adjusting the pointers of adjacent\n// items and the linked list's head or tail pointers as necessary\nImmediateList.prototype.remove = function(item) {\n  if (item._idleNext) {\n    item._idleNext._idlePrev = item._idlePrev;\n  }\n\n  if (item._idlePrev) {\n    item._idlePrev._idleNext = item._idleNext;\n  }\n\n  if (item === this.head)\n    this.head = item._idleNext;\n  if (item === this.tail)\n    this.tail = item._idlePrev;\n\n  item._idleNext = null;\n  item._idlePrev = null;\n};\n\n// Create a single linked list instance only once at startup\nvar immediateQueue = new ImmediateList();\n\n\nfunction processImmediate() {\n  var immediate = immediateQueue.head;\n  var tail = immediateQueue.tail;\n  var domain;\n\n  // Clear the linked list early in case new `setImmediate()` calls occur while\n  // immediate callbacks are executed\n  immediateQueue.head = immediateQueue.tail = null;\n\n  while (immediate) {\n    domain = immediate.domain;\n\n    if (!immediate._onImmediate)\n      continue;\n\n    if (domain)\n      domain.enter();\n\n    immediate._callback = immediate._onImmediate;\n\n    // Save next in case `clearImmediate(immediate)` is called from callback\n    var next = immediate._idleNext;\n\n    tryOnImmediate(immediate, tail);\n\n    if (domain)\n      domain.exit();\n\n    // If `clearImmediate(immediate)` wasn't called from the callback, use the\n    // `immediate`'s next item\n    if (immediate._idleNext)\n      immediate = immediate._idleNext;\n    else\n      immediate = next;\n  }\n\n  // Only round-trip to C++ land if we have to. Calling clearImmediate() on an\n  // immediate that's in |queue| is okay. Worst case is we make a superfluous\n  // call to NeedImmediateCallbackSetter().\n  if (!immediateQueue.head) {\n    process._needImmediateCallback = false;\n  }\n}\n\n\n// An optimization so that the try/finally only de-optimizes (since at least v8\n// 4.7) what is in this smaller function.\nfunction tryOnImmediate(immediate, oldTail) {\n  var threw = true;\n  try {\n    // make the actual call outside the try/catch to allow it to be optimized\n    runCallback(immediate);\n    threw = false;\n  } finally {\n    if (threw && immediate._idleNext) {\n      // Handle any remaining on next tick, assuming we're still alive to do so.\n      const curHead = immediateQueue.head;\n      const next = immediate._idleNext;\n      if (curHead) {\n        curHead._idlePrev = oldTail;\n        oldTail._idleNext = curHead;\n        next._idlePrev = null;\n        immediateQueue.head = next;\n      } else {\n        immediateQueue.head = next;\n        immediateQueue.tail = oldTail;\n      }\n      process.nextTick(processImmediate);\n    }\n  }\n}\n\nfunction runCallback(timer) {\n  const argv = timer._argv;\n  const argc = argv ? argv.length : 0;\n  switch (argc) {\n    // fast-path callbacks with 0-3 arguments\n    case 0:\n      return timer._callback();\n    case 1:\n      return timer._callback(argv[0]);\n    case 2:\n      return timer._callback(argv[0], argv[1]);\n    case 3:\n      return timer._callback(argv[0], argv[1], argv[2]);\n    // more than 3 arguments run slower with .apply\n    default:\n      return timer._callback.apply(timer, argv);\n  }\n}\n\n\nfunction Immediate() {\n  // assigning the callback here can cause optimize/deoptimize thrashing\n  // so have caller annotate the object (node v6.0.0, v8 5.0.71.35)\n  this._idleNext = null;\n  this._idlePrev = null;\n  this._callback = null;\n  this._argv = null;\n  this._onImmediate = null;\n  this.domain = process.domain;\n}\n\nexports.setImmediate = function(callback, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n\n  var i, args;\n\n  switch (arguments.length) {\n    // fast cases\n    case 1:\n      break;\n    case 2:\n      args = [arg1];\n      break;\n    case 3:\n      args = [arg1, arg2];\n      break;\n    default:\n      args = [arg1, arg2, arg3];\n      for (i = 4; i < arguments.length; i++)\n        // extend array dynamically, makes .apply run much faster in v6.0.0\n        args[i - 1] = arguments[i];\n      break;\n  }\n  return createImmediate(args, callback);\n};\n\nfunction createImmediate(args, callback) {\n  // declaring it `const immediate` causes v6.0.0 to deoptimize this function\n  var immediate = new Immediate();\n  immediate._callback = callback;\n  immediate._argv = args;\n  immediate._onImmediate = callback;\n\n  if (!process._needImmediateCallback) {\n    process._needImmediateCallback = true;\n    process._immediateCallback = processImmediate;\n  }\n\n  immediateQueue.append(immediate);\n\n  return immediate;\n}\n\n\nexports.clearImmediate = function(immediate) {\n  if (!immediate) return;\n\n  immediate._onImmediate = null;\n\n  immediateQueue.remove(immediate);\n\n  if (!immediateQueue.head) {\n    process._needImmediateCallback = false;\n  }\n};\n\n});"}
{"type":"var","id":0,"name":"time","val":"[undefined]"}
{"type":"var","id":1,"name":"padded","val":"[undefined]"}
{"type":"scope","id":0,"scope":{"type":"local","name":"onInterval","vars":[0,1]}}
{"type":"var","id":2,"name":"leftPad","val":"[Function]"}
{"type":"scope","id":1,"scope":{"type":"closure","vars":[2]}}
{"type":"frame","id":0,"frame":{"fn":"onInterval","script":"60","line":7,"col":40,"scopes":[0,1]}}
{"type":"var","id":3,"name":"timer","val":"Timeout"}
{"type":"var","id":4,"name":"args","val":"[undefined]"}
{"type":"var","id":5,"name":"callback","val":"[Function]"}
{"type":"scope","id":2,"scope":{"type":"local","name":"ontimeout","vars":[3,4,5]}}
{"type":"var","id":6,"name":"TimerWrap","val":"[Function]"}
{"type":"var","id":7,"name":"L","val":"Object"}
{"type":"var","id":8,"name":"assert","val":"[Function]"}
{"type":"var","id":9,"name":"debug","val":"[Function]"}
{"type":"var","id":10,"name":"kOnTimeout","val":0}
{"type":"var","id":11,"name":"TIMEOUT_MAX","val":2147483647}
{"type":"var","id":12,"name":"refedLists","val":"Object"}
{"type":"var","id":13,"name":"unrefedLists","val":"Object"}
{"type":"var","id":14,"name":"active","val":"[Function]"}
{"type":"var","id":15,"name":"insert","val":"[Function]"}
{"type":"var","id":16,"name":"createTimersList","val":"[Function]"}
{"type":"var","id":17,"name":"TimersList","val":"[Function]"}
{"type":"var","id":18,"name":"listOnTimeout","val":"[Function]"}
{"type":"var","id":19,"name":"tryOnTimeout","val":"[Function]"}
{"type":"var","id":20,"name":"listOnTimeoutNT","val":"[Function]"}
{"type":"var","id":21,"name":"reuse","val":"[Function]"}
{"type":"var","id":22,"name":"unenroll","val":"[Function]"}
{"type":"var","id":23,"name":"createSingleTimeout","val":"[Function]"}
{"type":"var","id":24,"name":"ontimeout","val":"[Function]"}
{"type":"var","id":25,"name":"rearm","val":"[Function]"}
{"type":"var","id":26,"name":"clearTimeout","val":"[Function]"}
{"type":"var","id":27,"name":"createRepeatTimeout","val":"[Function]"}
{"type":"var","id":28,"name":"Timeout","val":"[Function]"}
{"type":"var","id":29,"name":"unrefdHandle","val":"[Function]"}
{"type":"var","id":30,"name":"immediateQueue","val":"ImmediateList"}
{"type":"var","id":31,"name":"processImmediate","val":"[Function]"}
{"type":"var","id":32,"name":"tryOnImmediate","val":"[Function]"}
{"type":"var","id":33,"name":"runCallback","val":"[Function]"}
{"type":"var","id":34,"name":"Immediate","val":"[Function]"}
{"type":"var","id":35,"name":"createImmediate","val":"[Function]"}
{"type":"scope","id":3,"scope":{"type":"closure","vars":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]}}
{"type":"frame","id":1,"frame":{"fn":"ontimeout","script":"40","line":364,"col":13,"scopes":[2,3]}}
{"type":"var","id":36,"name":"list","val":"TimersList"}
{"type":"var","id":37,"name":"threw","val":true}
{"type":"scope","id":4,"scope":{"type":"local","name":"tryOnTimeout","vars":[3,36,37]}}
{"type":"frame","id":2,"frame":{"fn":"tryOnTimeout","script":"40","line":236,"col":4,"scopes":[4,3]}}
{"type":"var","id":38,"name":"msecs","val":1000}
{"type":"var","id":39,"name":"now","val":23176}
{"type":"var","id":40,"name":"diff","val":19099}
{"type":"var","id":41,"name":"timeRemaining","val":"[undefined]"}
{"type":"var","id":42,"name":"domain","val":"[undefined]"}
{"type":"scope","id":5,"scope":{"type":"local","name":"listOnTimeout","vars":[36,38,39,40,3,41,42]}}
{"type":"frame","id":3,"frame":{"fn":"listOnTimeout","script":"40","line":206,"col":4,"scopes":[5,3]}}
{"date":1485030017438,"type":"break","frames":[0,1,2,3]}
{"type":"var","id":43,"name":"time","val":"20:20:17"}
{"type":"scope","id":6,"scope":{"type":"local","name":"onInterval","vars":[43,1]}}
{"type":"frame","id":4,"frame":{"fn":"onInterval","script":"60","line":8,"col":17,"scopes":[6,1]}}
{"date":1485030017450,"type":"break","frames":[4,1,2,3]}
{"type":"var","id":44,"name":"s","val":"20:20:17"}
{"type":"var","id":45,"name":"len","val":12}
{"type":"scope","id":7,"scope":{"type":"local","name":"leftPad","vars":[44,45]}}
{"type":"frame","id":5,"frame":{"fn":"leftPad","script":"60","line":13,"col":2,"scopes":[7,1]}}
{"date":1485030017461,"type":"break","frames":[5,4,1,2,3]}
{"type":"frame","id":6,"frame":{"fn":"leftPad","script":"60","line":15,"col":2,"scopes":[7,1]}}
{"date":1485030017472,"type":"break","frames":[6,4,1,2,3]}
{"type":"frame","id":7,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[7,1]}}
{"date":1485030017483,"type":"break","frames":[7,4,1,2,3]}
{"type":"frame","id":8,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[7,1]}}
{"date":1485030017493,"type":"break","frames":[8,4,1,2,3]}
{"type":"var","id":46,"name":"s","val":" 20:20:17"}
{"type":"scope","id":8,"scope":{"type":"local","name":"leftPad","vars":[46,45]}}
{"type":"frame","id":9,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[8,1]}}
{"date":1485030017504,"type":"break","frames":[9,4,1,2,3]}
{"type":"frame","id":10,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[8,1]}}
{"date":1485030017514,"type":"break","frames":[10,4,1,2,3]}
{"type":"var","id":47,"name":"s","val":"  20:20:17"}
{"type":"scope","id":9,"scope":{"type":"local","name":"leftPad","vars":[47,45]}}
{"type":"frame","id":11,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[9,1]}}
{"date":1485030017524,"type":"break","frames":[11,4,1,2,3]}
{"type":"frame","id":12,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[9,1]}}
{"date":1485030017534,"type":"break","frames":[12,4,1,2,3]}
{"type":"var","id":48,"name":"s","val":"   20:20:17"}
{"type":"scope","id":10,"scope":{"type":"local","name":"leftPad","vars":[48,45]}}
{"type":"frame","id":13,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[10,1]}}
{"date":1485030017544,"type":"break","frames":[13,4,1,2,3]}
{"type":"frame","id":14,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[10,1]}}
{"date":1485030017554,"type":"break","frames":[14,4,1,2,3]}
{"type":"var","id":49,"name":"s","val":"    20:20:17"}
{"type":"scope","id":11,"scope":{"type":"local","name":"leftPad","vars":[49,45]}}
{"type":"frame","id":15,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[11,1]}}
{"date":1485030017564,"type":"break","frames":[15,4,1,2,3]}
{"type":"frame","id":16,"frame":{"fn":"leftPad","script":"60","line":21,"col":2,"scopes":[11,1]}}
{"date":1485030017575,"type":"break","frames":[16,4,1,2,3]}
{"type":"frame","id":17,"frame":{"fn":"leftPad","script":"60","line":22,"col":0,"scopes":[11,1]}}
{"date":1485030017585,"type":"break","frames":[17,4,1,2,3]}
{"type":"var","id":50,"name":"padded","val":"    20:20:17"}
{"type":"scope","id":12,"scope":{"type":"local","name":"onInterval","vars":[43,50]}}
{"type":"frame","id":18,"frame":{"fn":"onInterval","script":"60","line":9,"col":2,"scopes":[12,1]}}
{"date":1485030017594,"type":"break","frames":[18,1,2,3]}
{"type":"script","id":"35","url":"bootstrap_node.js","endLine":511,"endColumn":0,"source":"// Hello, and welcome to hacking node.js!\n//\n// This file is invoked by node::LoadEnvironment in src/node.cc, and is\n// responsible for bootstrapping the node.js core. As special caution is given\n// to the performance of the startup process, many dependencies are invoked\n// lazily.\n\n'use strict';\n\n(function(process) {\n\n  function startup() {\n    const EventEmitter = NativeModule.require('events');\n    process._eventsCount = 0;\n\n    Object.setPrototypeOf(process, Object.create(EventEmitter.prototype, {\n      constructor: {\n        value: process.constructor\n      }\n    }));\n\n    EventEmitter.call(process);\n\n    let eeWarned = false;\n    Object.defineProperty(process, 'EventEmitter', {\n      get() {\n        const internalUtil = NativeModule.require('internal/util');\n        eeWarned = internalUtil.printDeprecationMessage(\n          \"process.EventEmitter is deprecated. Use require('events') instead.\",\n          eeWarned\n        );\n        return EventEmitter;\n      }\n    });\n\n    setupProcessObject();\n\n    // do this good and early, since it handles errors.\n    setupProcessFatal();\n\n    setupGlobalVariables();\n    if (!process._noBrowserGlobals) {\n      setupGlobalTimeouts();\n      setupGlobalConsole();\n    }\n\n    const _process = NativeModule.require('internal/process');\n\n    _process.setup_hrtime();\n    _process.setup_cpuUsage();\n    _process.setupConfig(NativeModule._source);\n    NativeModule.require('internal/process/warning').setup();\n    NativeModule.require('internal/process/next_tick').setup();\n    NativeModule.require('internal/process/stdio').setup();\n    _process.setupKillAndExit();\n    _process.setupSignalHandlers();\n\n    // Do not initialize channel in debugger agent, it deletes env variable\n    // and the main thread won't see it.\n    if (process.argv[1] !== '--debug-agent')\n      _process.setupChannel();\n\n    _process.setupRawDebug();\n\n    Object.defineProperty(process, 'argv0', {\n      enumerable: true,\n      configurable: false,\n      value: process.argv[0]\n    });\n    process.argv[0] = process.execPath;\n\n    // There are various modes that Node can run in. The most common two\n    // are running from a script and running the REPL - but there are a few\n    // others like the debugger or running --eval arguments. Here we decide\n    // which mode we run in.\n\n    if (NativeModule.exists('_third_party_main')) {\n      // To allow people to extend Node in different ways, this hook allows\n      // one to drop a file lib/_third_party_main.js into the build\n      // directory which will be executed instead of Node's normal loading.\n      process.nextTick(function() {\n        NativeModule.require('_third_party_main');\n      });\n\n    } else if (process.argv[1] === 'debug') {\n      // Start the debugger agent\n      NativeModule.require('_debugger').start();\n\n    } else if (process.argv[1] === '--remote_debugging_server') {\n      // Start the debugging server\n      NativeModule.require('internal/inspector/remote_debugging_server');\n\n    } else if (process.argv[1] === '--debug-agent') {\n      // Start the debugger agent\n      NativeModule.require('_debug_agent').start();\n\n    } else if (process.profProcess) {\n      NativeModule.require('internal/v8_prof_processor');\n\n    } else {\n      // There is user code to be run\n\n      // If this is a worker in cluster mode, start up the communication\n      // channel. This needs to be done before any user code gets executed\n      // (including preload modules).\n      if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\n        const cluster = NativeModule.require('cluster');\n        cluster._setupWorker();\n\n        // Make sure it's not accidentally inherited by child processes.\n        delete process.env.NODE_UNIQUE_ID;\n      }\n\n      if (process._eval != null && !process._forceRepl) {\n        // User passed '-e' or '--eval' arguments to Node without '-i' or\n        // '--interactive'\n        preloadModules();\n\n        const internalModule = NativeModule.require('internal/module');\n        internalModule.addBuiltinLibsToObject(global);\n        run(() => {\n          evalScript('[eval]');\n        });\n      } else if (process.argv[1]) {\n        // make process.argv[1] into a full path\n        const path = NativeModule.require('path');\n        process.argv[1] = path.resolve(process.argv[1]);\n\n        const Module = NativeModule.require('module');\n\n        // check if user passed `-c` or `--check` arguments to Node.\n        if (process._syntax_check_only != null) {\n          const vm = NativeModule.require('vm');\n          const fs = NativeModule.require('fs');\n          const internalModule = NativeModule.require('internal/module');\n          // read the source\n          const filename = Module._resolveFilename(process.argv[1]);\n          var source = fs.readFileSync(filename, 'utf-8');\n          // remove shebang and BOM\n          source = internalModule.stripBOM(source.replace(/^#!.*/, ''));\n          // wrap it\n          source = Module.wrap(source);\n          // compile the script, this will throw if it fails\n          new vm.Script(source, {filename: filename, displayErrors: true});\n          process.exit(0);\n        }\n\n        preloadModules();\n        run(Module.runMain);\n      } else {\n        preloadModules();\n        // If -i or --interactive were passed, or stdin is a TTY.\n        if (process._forceRepl || NativeModule.require('tty').isatty(0)) {\n          // REPL\n          const cliRepl = NativeModule.require('internal/repl');\n          cliRepl.createInternalRepl(process.env, function(err, repl) {\n            if (err) {\n              throw err;\n            }\n            repl.on('exit', function() {\n              if (repl._flushing) {\n                repl.pause();\n                return repl.once('flushHistory', function() {\n                  process.exit();\n                });\n              }\n              process.exit();\n            });\n          });\n\n          if (process._eval != null) {\n            // User passed '-e' or '--eval'\n            evalScript('[eval]');\n          }\n        } else {\n          // Read all of stdin - execute it.\n          process.stdin.setEncoding('utf8');\n\n          var code = '';\n          process.stdin.on('data', function(d) {\n            code += d;\n          });\n\n          process.stdin.on('end', function() {\n            process._eval = code;\n            evalScript('[stdin]');\n          });\n        }\n      }\n    }\n  }\n\n  function setupProcessObject() {\n    process._setupProcessObject(pushValueToArray);\n\n    function pushValueToArray() {\n      for (var i = 0; i < arguments.length; i++)\n        this.push(arguments[i]);\n    }\n  }\n\n  function setupGlobalVariables() {\n    global.process = process;\n    const util = NativeModule.require('util');\n\n    // Deprecate GLOBAL and root\n    ['GLOBAL', 'root'].forEach(function(name) {\n      // getter\n      const get = util.deprecate(function() {\n        return this;\n      }, `'${name}' is deprecated, use 'global'`);\n      // setter\n      const set = util.deprecate(function(value) {\n        Object.defineProperty(this, name, {\n          configurable: true,\n          writable: true,\n          enumerable: true,\n          value: value\n        });\n      }, `'${name}' is deprecated, use 'global'`);\n      // define property\n      Object.defineProperty(global, name, { get, set, configurable: true });\n    });\n\n    global.Buffer = NativeModule.require('buffer').Buffer;\n    process.domain = null;\n    process._exiting = false;\n  }\n\n  function setupGlobalTimeouts() {\n    const timers = NativeModule.require('timers');\n    global.clearImmediate = timers.clearImmediate;\n    global.clearInterval = timers.clearInterval;\n    global.clearTimeout = timers.clearTimeout;\n    global.setImmediate = timers.setImmediate;\n    global.setInterval = timers.setInterval;\n    global.setTimeout = timers.setTimeout;\n  }\n\n  function setupGlobalConsole() {\n    var inspectorConsole;\n    var wrapConsoleCall;\n    if (process.inspector) {\n      inspectorConsole = global.console;\n      wrapConsoleCall = process.inspector.wrapConsoleCall;\n      delete process.inspector;\n    }\n    var console;\n    Object.defineProperty(global, 'console', {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!console) {\n          console = NativeModule.require('console');\n          installInspectorConsoleIfNeeded(console,\n                                          inspectorConsole,\n                                          wrapConsoleCall);\n        }\n        return console;\n      }\n    });\n  }\n\n  function installInspectorConsoleIfNeeded(console,\n                                           inspectorConsole,\n                                           wrapConsoleCall) {\n    if (!inspectorConsole)\n      return;\n    const config = {};\n    for (const key of Object.keys(console)) {\n      if (!inspectorConsole.hasOwnProperty(key))\n        continue;\n      // If node console has the same method as inspector console,\n      // then wrap these two methods into one. Native wrapper will preserve\n      // the original stack.\n      console[key] = wrapConsoleCall(inspectorConsole[key],\n                                     console[key],\n                                     config);\n    }\n    for (const key of Object.keys(inspectorConsole)) {\n      if (console.hasOwnProperty(key))\n        continue;\n      console[key] = inspectorConsole[key];\n    }\n  }\n\n  function setupProcessFatal() {\n\n    process._fatalException = function(er) {\n      var caught;\n\n      if (process.domain && process.domain._errorHandler)\n        caught = process.domain._errorHandler(er) || caught;\n\n      if (!caught)\n        caught = process.emit('uncaughtException', er);\n\n      // If someone handled it, then great.  otherwise, die in C++ land\n      // since that means that we'll exit the process, emit the 'exit' event\n      if (!caught) {\n        try {\n          if (!process._exiting) {\n            process._exiting = true;\n            process.emit('exit', 1);\n          }\n        } catch (er) {\n          // nothing to be done about it at this point.\n        }\n\n      // if we handled an error, then make sure any ticks get processed\n      } else {\n        NativeModule.require('timers').setImmediate(process._tickCallback);\n      }\n\n      return caught;\n    };\n  }\n\n  function tryGetCwd(path) {\n    var threw = true;\n    var cwd;\n    try {\n      cwd = process.cwd();\n      threw = false;\n    } finally {\n      if (threw) {\n        // getcwd(3) can fail if the current working directory has been deleted.\n        // Fall back to the directory name of the (absolute) executable path.\n        // It's not really correct but what are the alternatives?\n        return path.dirname(process.execPath);\n      }\n    }\n    return cwd;\n  }\n\n  function evalScript(name) {\n    const Module = NativeModule.require('module');\n    const path = NativeModule.require('path');\n    const cwd = tryGetCwd(path);\n\n    const module = new Module(name);\n    module.filename = path.join(cwd, name);\n    module.paths = Module._nodeModulePaths(cwd);\n    const body = process._eval;\n    const script = `global.__filename = ${JSON.stringify(name)};\\n` +\n                   'global.exports = exports;\\n' +\n                   'global.module = module;\\n' +\n                   'global.__dirname = __dirname;\\n' +\n                   'global.require = require;\\n' +\n                   'return require(\"vm\").runInThisContext(' +\n                   `${JSON.stringify(body)}, { filename: ` +\n                   `${JSON.stringify(name)}, displayErrors: true });\\n`;\n    // Defer evaluation for a tick.  This is a workaround for deferred\n    // events not firing when evaluating scripts from the command line,\n    // see https://github.com/nodejs/node/issues/1600.\n    setImmediate(function() {\n      const result = module._compile(script, `${name}-wrapper`);\n      if (process._print_eval) console.log(result);\n    });\n  }\n\n  // Load preload modules\n  function preloadModules() {\n    if (process._preload_modules) {\n      NativeModule.require('module')._preloadModules(process._preload_modules);\n    }\n  }\n\n  function isDebugBreak() {\n    return process.execArgv.some((arg) => {\n      return arg.match(/^--debug-brk(=[0-9]*)?$/);\n    });\n  }\n\n  function run(entryFunction) {\n    if (process._debugWaitConnect && isDebugBreak()) {\n\n      // XXX Fix this terrible hack!\n      //\n      // Give the client program a few ticks to connect.\n      // Otherwise, there's a race condition where `node debug foo.js`\n      // will not be able to connect in time to catch the first\n      // breakpoint message on line 1.\n      //\n      // A better fix would be to somehow get a message from the\n      // V8 debug object about a connection, and runMain when\n      // that occurs.  --isaacs\n\n      const debugTimeout = +process.env.NODE_DEBUG_TIMEOUT || 50;\n      setTimeout(entryFunction, debugTimeout);\n\n    } else {\n      // Main entry point into most programs:\n      entryFunction();\n    }\n  }\n\n  // Below you find a minimal module system, which is used to load the node\n  // core modules found in lib/*.js. All core modules are compiled into the\n  // node binary, so they can be loaded faster.\n\n  const ContextifyScript = process.binding('contextify').ContextifyScript;\n  function runInThisContext(code, options) {\n    const script = new ContextifyScript(code, options);\n    return script.runInThisContext();\n  }\n\n  function NativeModule(id) {\n    this.filename = `${id}.js`;\n    this.id = id;\n    this.exports = {};\n    this.loaded = false;\n    this.loading = false;\n  }\n\n  NativeModule._source = process.binding('natives');\n  NativeModule._cache = {};\n\n  NativeModule.require = function(id) {\n    if (id === 'native_module') {\n      return NativeModule;\n    }\n\n    const cached = NativeModule.getCached(id);\n    if (cached && (cached.loaded || cached.loading)) {\n      return cached.exports;\n    }\n\n    if (!NativeModule.exists(id)) {\n      throw new Error(`No such native module ${id}`);\n    }\n\n    process.moduleLoadList.push(`NativeModule ${id}`);\n\n    const nativeModule = new NativeModule(id);\n\n    nativeModule.cache();\n    nativeModule.compile();\n\n    return nativeModule.exports;\n  };\n\n  NativeModule.getCached = function(id) {\n    return NativeModule._cache[id];\n  };\n\n  NativeModule.exists = function(id) {\n    return NativeModule._source.hasOwnProperty(id);\n  };\n\n  const EXPOSE_INTERNALS = process.execArgv.some(function(arg) {\n    return arg.match(/^--expose[-_]internals$/);\n  });\n\n  if (EXPOSE_INTERNALS) {\n    NativeModule.nonInternalExists = NativeModule.exists;\n\n    NativeModule.isInternal = function(id) {\n      return false;\n    };\n  } else {\n    NativeModule.nonInternalExists = function(id) {\n      return NativeModule.exists(id) && !NativeModule.isInternal(id);\n    };\n\n    NativeModule.isInternal = function(id) {\n      return id.startsWith('internal/');\n    };\n  }\n\n\n  NativeModule.getSource = function(id) {\n    return NativeModule._source[id];\n  };\n\n  NativeModule.wrap = function(script) {\n    return NativeModule.wrapper[0] + script + NativeModule.wrapper[1];\n  };\n\n  NativeModule.wrapper = [\n    '(function (exports, require, module, __filename, __dirname) { ',\n    '\\n});'\n  ];\n\n  NativeModule.prototype.compile = function() {\n    var source = NativeModule.getSource(this.id);\n    source = NativeModule.wrap(source);\n\n    this.loading = true;\n\n    try {\n      const fn = runInThisContext(source, {\n        filename: this.filename,\n        lineOffset: 0,\n        displayErrors: true\n      });\n      fn(this.exports, NativeModule.require, this, this.filename);\n\n      this.loaded = true;\n    } finally {\n      this.loading = false;\n    }\n  };\n\n  NativeModule.prototype.cache = function() {\n    NativeModule._cache[this.id] = this;\n  };\n\n  startup();\n});\n"}
{"type":"scope","id":13,"scope":{"type":"local","name":"get","vars":[]}}
{"type":"var","id":51,"name":"inspectorConsole","val":"Object"}
{"type":"var","id":52,"name":"wrapConsoleCall","val":"[Function]"}
{"type":"var","id":53,"name":"console","val":"Console"}
{"type":"scope","id":14,"scope":{"type":"closure","name":"setupGlobalConsole","vars":[51,52,53]}}
{"type":"var","id":54,"name":"process","val":"process"}
{"type":"var","id":55,"name":"setupProcessObject","val":"[Function]"}
{"type":"var","id":56,"name":"setupGlobalVariables","val":"[Function]"}
{"type":"var","id":57,"name":"setupGlobalTimeouts","val":"[Function]"}
{"type":"var","id":58,"name":"setupGlobalConsole","val":"[Function]"}
{"type":"var","id":59,"name":"installInspectorConsoleIfNeeded","val":"[Function]"}
{"type":"var","id":60,"name":"setupProcessFatal","val":"[Function]"}
{"type":"var","id":61,"name":"tryGetCwd","val":"[Function]"}
{"type":"var","id":62,"name":"evalScript","val":"[Function]"}
{"type":"var","id":63,"name":"preloadModules","val":"[Function]"}
{"type":"var","id":64,"name":"isDebugBreak","val":"[Function]"}
{"type":"var","id":65,"name":"run","val":"[Function]"}
{"type":"var","id":66,"name":"ContextifyScript","val":"[Function]"}
{"type":"var","id":67,"name":"runInThisContext","val":"[Function]"}
{"type":"var","id":68,"name":"NativeModule","val":"[Function]"}
{"type":"scope","id":15,"scope":{"type":"closure","vars":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]}}
{"type":"frame","id":19,"frame":{"fn":"get","script":"35","line":252,"col":8,"scopes":[13,14,15]}}
{"date":1485030017607,"type":"break","frames":[19,18,1,2,3]}
{"type":"frame","id":20,"frame":{"fn":"get","script":"35","line":258,"col":8,"scopes":[13,14,15]}}
{"date":1485030017617,"type":"break","frames":[20,18,1,2,3]}
{"type":"frame","id":21,"frame":{"fn":"get","script":"35","line":259,"col":6,"scopes":[13,14,15]}}
{"date":1485030017628,"type":"break","frames":[21,18,1,2,3]}
{"type":"script","id":"61","url":"console.js","endLine":102,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\n\nfunction Console(stdout, stderr) {\n  if (!(this instanceof Console)) {\n    return new Console(stdout, stderr);\n  }\n  if (!stdout || typeof stdout.write !== 'function') {\n    throw new TypeError('Console expects a writable stream instance');\n  }\n  if (!stderr) {\n    stderr = stdout;\n  } else if (typeof stderr.write !== 'function') {\n    throw new TypeError('Console expects writable stream instances');\n  }\n\n  var prop = {\n    writable: true,\n    enumerable: false,\n    configurable: true\n  };\n  prop.value = stdout;\n  Object.defineProperty(this, '_stdout', prop);\n  prop.value = stderr;\n  Object.defineProperty(this, '_stderr', prop);\n  prop.value = new Map();\n  Object.defineProperty(this, '_times', prop);\n\n  // bind the prototype functions to this Console instance\n  var keys = Object.keys(Console.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var k = keys[v];\n    this[k] = this[k].bind(this);\n  }\n}\n\n\n// As of v8 5.0.71.32, the combination of rest param, template string\n// and .apply(null, args) benchmarks consistently faster than using\n// the spread operator when calling util.format.\nConsole.prototype.log = function(...args) {\n  this._stdout.write(`${util.format.apply(null, args)}\\n`);\n};\n\n\nConsole.prototype.info = Console.prototype.log;\n\n\nConsole.prototype.warn = function(...args) {\n  this._stderr.write(`${util.format.apply(null, args)}\\n`);\n};\n\n\nConsole.prototype.error = Console.prototype.warn;\n\n\nConsole.prototype.dir = function(object, options) {\n  options = Object.assign({customInspect: false}, options);\n  this._stdout.write(`${util.inspect(object, options)}\\n`);\n};\n\n\nConsole.prototype.time = function(label) {\n  this._times.set(label, process.hrtime());\n};\n\n\nConsole.prototype.timeEnd = function(label) {\n  const time = this._times.get(label);\n  if (!time) {\n    process.emitWarning(`No such label '${label}' for console.timeEnd()`);\n    return;\n  }\n  const duration = process.hrtime(time);\n  const ms = duration[0] * 1000 + duration[1] / 1e6;\n  this.log('%s: %sms', label, ms.toFixed(3));\n  this._times.delete(label);\n};\n\n\nConsole.prototype.trace = function trace(...args) {\n  // TODO probably can to do this better with V8's debug object once that is\n  // exposed.\n  var err = new Error();\n  err.name = 'Trace';\n  err.message = util.format.apply(null, args);\n  Error.captureStackTrace(err, trace);\n  this.error(err.stack);\n};\n\n\nConsole.prototype.assert = function(expression, ...args) {\n  if (!expression) {\n    require('assert').ok(false, util.format.apply(null, args));\n  }\n};\n\n\nmodule.exports = new Console(process.stdout, process.stderr);\nmodule.exports.Console = Console;\n\n});"}
{"type":"var","id":69,"name":"args","val":"Array[1]"}
{"type":"scope","id":16,"scope":{"type":"local","name":"Console.log","vars":[69]}}
{"type":"var","id":70,"name":"require","val":"[Function]"}
{"type":"var","id":71,"name":"util","val":"Object"}
{"type":"var","id":72,"name":"Console","val":"[Function]"}
{"type":"scope","id":17,"scope":{"type":"closure","vars":[70,71,72]}}
{"type":"frame","id":22,"frame":{"fn":"Console.log","script":"61","line":42,"col":2,"scopes":[16,17]}}
{"type":"frame","id":23,"frame":{"fn":"onInterval","script":"60","line":9,"col":10,"scopes":[12,1]}}
{"date":1485030017638,"type":"break","frames":[22,23,1,2,3]}
{"type":"script","id":"37","url":"util.js","endLine":1052,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst uv = process.binding('uv');\nconst Buffer = require('buffer').Buffer;\nconst internalUtil = require('internal/util');\nconst binding = process.binding('util');\n\nconst isError = internalUtil.isError;\n\nconst inspectDefaultOptions = Object.seal({\n  showHidden: false,\n  depth: 2,\n  colors: false,\n  customInspect: true,\n  showProxy: false,\n  maxArrayLength: 100,\n  breakLength: 60\n});\n\nvar Debug;\nvar simdFormatters;\n\n// SIMD is only available when --harmony_simd is specified on the command line\n// and the set of available types differs between v5 and v6, that's why we use\n// a map to look up and store the formatters.  It also provides a modicum of\n// protection against users monkey-patching the SIMD object.\nif (typeof global.SIMD === 'object' && global.SIMD !== null) {\n  simdFormatters = new Map();\n\n  const make = (extractLane, count) => {\n    return (ctx, value, recurseTimes, visibleKeys, keys) => {\n      const output = new Array(count);\n      for (var i = 0; i < count; i += 1)\n        output[i] = formatPrimitive(ctx, extractLane(value, i));\n      return output;\n    };\n  };\n\n  const SIMD = global.SIMD;  // Pacify eslint.\n\n  const countPerType = {\n    Bool16x8: 8,\n    Bool32x4: 4,\n    Bool8x16: 16,\n    Float32x4: 4,\n    Int16x8: 8,\n    Int32x4: 4,\n    Int8x16: 16,\n    Uint16x8: 8,\n    Uint32x4: 4,\n    Uint8x16: 16\n  };\n\n  for (const key in countPerType) {\n    const type = SIMD[key];\n    simdFormatters.set(type, make(type.extractLane, countPerType[key]));\n  }\n}\n\nfunction tryStringify(arg) {\n  try {\n    return JSON.stringify(arg);\n  } catch (_) {\n    return '[Circular]';\n  }\n}\n\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    const objects = new Array(arguments.length);\n    for (var index = 0; index < arguments.length; index++) {\n      objects[index] = inspect(arguments[index]);\n    }\n    return objects.join(' ');\n  }\n\n  var argLen = arguments.length;\n\n  if (argLen === 1) return f;\n\n  var str = '';\n  var a = 1;\n  var lastPos = 0;\n  for (var i = 0; i < f.length;) {\n    if (f.charCodeAt(i) === 37/*'%'*/ && i + 1 < f.length) {\n      switch (f.charCodeAt(i + 1)) {\n        case 100: // 'd'\n          if (a >= argLen)\n            break;\n          if (lastPos < i)\n            str += f.slice(lastPos, i);\n          str += Number(arguments[a++]);\n          lastPos = i = i + 2;\n          continue;\n        case 106: // 'j'\n          if (a >= argLen)\n            break;\n          if (lastPos < i)\n            str += f.slice(lastPos, i);\n          str += tryStringify(arguments[a++]);\n          lastPos = i = i + 2;\n          continue;\n        case 115: // 's'\n          if (a >= argLen)\n            break;\n          if (lastPos < i)\n            str += f.slice(lastPos, i);\n          str += String(arguments[a++]);\n          lastPos = i = i + 2;\n          continue;\n        case 37: // '%'\n          if (lastPos < i)\n            str += f.slice(lastPos, i);\n          str += '%';\n          lastPos = i = i + 2;\n          continue;\n      }\n    }\n    ++i;\n  }\n  if (lastPos === 0)\n    str = f;\n  else if (lastPos < f.length)\n    str += f.slice(lastPos);\n  while (a < argLen) {\n    const x = arguments[a++];\n    if (x === null || (typeof x !== 'object' && typeof x !== 'symbol')) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\nexports.deprecate = internalUtil._deprecate;\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (debugEnviron === undefined)\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp(`\\\\b${set}\\\\b`, 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments[2] !== undefined) ctx.depth = arguments[2];\n  if (arguments[3] !== undefined) ctx.colors = arguments[3];\n  if (typeof opts === 'boolean') {\n    // legacy...\n    ctx.showHidden = opts;\n  }\n  // Set default and user-specified options\n  ctx = Object.assign({}, inspect.defaultOptions, ctx, opts);\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\nObject.defineProperty(inspect, 'defaultOptions', {\n  get: function() {\n    return inspectDefaultOptions;\n  },\n  set: function(options) {\n    if (options === null || typeof options !== 'object') {\n      throw new TypeError('\"options\" must be an object');\n    }\n    Object.assign(inspectDefaultOptions, options);\n    return inspectDefaultOptions;\n  }\n});\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [30, 39],\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'symbol': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nconst customInspectSymbol = internalUtil.customInspectSymbol;\n\nexports.inspect = inspect;\nexports.inspect.custom = customInspectSymbol;\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return `\\u001b[${inspect.colors[style][0]}m${str}` +\n           `\\u001b[${inspect.colors[style][1]}m`;\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = Object.create(null);\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n    hash[val] = true;\n  }\n\n  return hash;\n}\n\n\nfunction getConstructorOf(obj) {\n  while (obj) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, 'constructor');\n    if (descriptor !== undefined &&\n        typeof descriptor.value === 'function' &&\n        descriptor.value.name !== '') {\n      return descriptor.value;\n    }\n\n    obj = Object.getPrototypeOf(obj);\n  }\n\n  return null;\n}\n\n\nfunction ensureDebugIsInitialized() {\n  if (Debug === undefined) {\n    const runInDebugContext = require('vm').runInDebugContext;\n    Debug = runInDebugContext('Debug');\n  }\n}\n\n\nfunction inspectPromise(p) {\n  // Only create a mirror if the object is a Promise.\n  if (!binding.isPromise(p))\n    return null;\n  ensureDebugIsInitialized();\n  const mirror = Debug.MakeMirror(p, true);\n  return {status: mirror.status(), value: mirror.promiseValue().value_};\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  if (ctx.showProxy &&\n      ((typeof value === 'object' && value !== null) ||\n       typeof value === 'function')) {\n    var proxy = undefined;\n    var proxyCache = ctx.proxyCache;\n    if (!proxyCache)\n      proxyCache = ctx.proxyCache = new Map();\n    // Determine if we've already seen this object and have\n    // determined that it either is or is not a proxy.\n    if (proxyCache.has(value)) {\n      // We've seen it, if the value is not undefined, it's a Proxy.\n      proxy = proxyCache.get(value);\n    } else {\n      // Haven't seen it. Need to check.\n      // If it's not a Proxy, this will return undefined.\n      // Otherwise, it'll return an array. The first item\n      // is the target, the second item is the handler.\n      // We ignore (and do not return) the Proxy isRevoked property.\n      proxy = binding.getProxyDetails(value);\n      if (proxy) {\n        // We know for a fact that this isn't a Proxy.\n        // Mark it as having already been evaluated.\n        // We do this because this object is passed\n        // recursively to formatValue below in order\n        // for it to get proper formatting, and because\n        // the target and handle objects also might be\n        // proxies... it's unfortunate but necessary.\n        proxyCache.set(proxy, undefined);\n      }\n      // If the object is not a Proxy, then this stores undefined.\n      // This tells the code above that we've already checked and\n      // ruled it out. If the object is a proxy, this caches the\n      // results of the getProxyDetails call.\n      proxyCache.set(value, proxy);\n    }\n    if (proxy) {\n      return 'Proxy ' + formatValue(ctx, proxy, recurseTimes);\n    }\n  }\n\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect && value) {\n    const maybeCustomInspect = value[customInspectSymbol] || value.inspect;\n\n    if (typeof maybeCustomInspect === 'function' &&\n        // Filter out the util module, its inspect function is special\n        maybeCustomInspect !== exports.inspect &&\n        // Also filter out any prototype objects using the circular check.\n        !(value.constructor && value.constructor.prototype === value)) {\n      let ret = maybeCustomInspect.call(value, recurseTimes, ctx);\n\n      // If the custom inspection method returned `this`, don't go into\n      // infinite recursion.\n      if (ret !== value) {\n        if (typeof ret !== 'string') {\n          ret = formatValue(ctx, ret, recurseTimes);\n        }\n        return ret;\n      }\n    }\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n    keys = keys.concat(Object.getOwnPropertySymbols(value));\n  }\n\n  // This could be a boxed primitive (new String(), etc.), check valueOf()\n  // NOTE: Avoid calling `valueOf` on `Date` instance because it will return\n  // a number which, when object has some additional user-stored `keys`,\n  // will be printed out.\n  var formatted;\n  var raw = value;\n  try {\n    // the .valueOf() call can fail for a multitude of reasons\n    if (!isDate(value))\n      raw = value.valueOf();\n  } catch (e) {\n    // ignore...\n  }\n\n  if (typeof raw === 'string') {\n    // for boxed Strings, we have to remove the 0-n indexed entries,\n    // since they just noisy up the output and are redundant\n    keys = keys.filter(function(key) {\n      return !(key >= 0 && key < raw.length);\n    });\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (typeof value === 'function') {\n      return ctx.stylize(`[Function${value.name ? `: ${value.name}` : ''}]`,\n        'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      if (Number.isNaN(value.getTime())) {\n        return ctx.stylize(value.toString(), 'date');\n      } else {\n        return ctx.stylize(Date.prototype.toISOString.call(value), 'date');\n      }\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n    // now check the `raw` value to handle boxed primitives\n    if (typeof raw === 'string') {\n      formatted = formatPrimitiveNoColor(ctx, raw);\n      return ctx.stylize(`[String: ${formatted}]`, 'string');\n    }\n    if (typeof raw === 'symbol') {\n      formatted = formatPrimitiveNoColor(ctx, raw);\n      return ctx.stylize(`[Symbol: ${formatted}]`, 'symbol');\n    }\n    if (typeof raw === 'number') {\n      formatted = formatPrimitiveNoColor(ctx, raw);\n      return ctx.stylize(`[Number: ${formatted}]`, 'number');\n    }\n    if (typeof raw === 'boolean') {\n      formatted = formatPrimitiveNoColor(ctx, raw);\n      return ctx.stylize(`[Boolean: ${formatted}]`, 'boolean');\n    }\n    // Fast path for ArrayBuffer and SharedArrayBuffer.\n    // Can't do the same for DataView because it has a non-primitive\n    // .buffer property that we need to recurse for.\n    if (binding.isArrayBuffer(value) || binding.isSharedArrayBuffer(value)) {\n      return `${getConstructorOf(value).name}` +\n             ` { byteLength: ${formatNumber(ctx, value.byteLength)} }`;\n    }\n  }\n\n  var constructor = getConstructorOf(value);\n  var base = '', empty = false, braces;\n  var formatter = formatObject;\n\n  // We can't compare constructors for various objects using a comparison like\n  // `constructor === Array` because the object could have come from a different\n  // context and thus the constructor won't match. Instead we check the\n  // constructor names (including those up the prototype chain where needed) to\n  // determine object types.\n  if (Array.isArray(value)) {\n    // Unset the constructor to prevent \"Array [...]\" for ordinary arrays.\n    if (constructor && constructor.name === 'Array')\n      constructor = null;\n    braces = ['[', ']'];\n    empty = value.length === 0;\n    formatter = formatArray;\n  } else if (binding.isSet(value)) {\n    braces = ['{', '}'];\n    // With `showHidden`, `length` will display as a hidden property for\n    // arrays. For consistency's sake, do the same for `size`, even though this\n    // property isn't selected by Object.getOwnPropertyNames().\n    if (ctx.showHidden)\n      keys.unshift('size');\n    empty = value.size === 0;\n    formatter = formatSet;\n  } else if (binding.isMap(value)) {\n    braces = ['{', '}'];\n    // Ditto.\n    if (ctx.showHidden)\n      keys.unshift('size');\n    empty = value.size === 0;\n    formatter = formatMap;\n  } else if (binding.isArrayBuffer(value) ||\n             binding.isSharedArrayBuffer(value)) {\n    braces = ['{', '}'];\n    keys.unshift('byteLength');\n    visibleKeys.byteLength = true;\n  } else if (binding.isDataView(value)) {\n    braces = ['{', '}'];\n    // .buffer goes last, it's not a primitive like the others.\n    keys.unshift('byteLength', 'byteOffset', 'buffer');\n    visibleKeys.byteLength = true;\n    visibleKeys.byteOffset = true;\n    visibleKeys.buffer = true;\n  } else if (binding.isTypedArray(value)) {\n    braces = ['[', ']'];\n    formatter = formatTypedArray;\n    if (ctx.showHidden) {\n      // .buffer goes last, it's not a primitive like the others.\n      keys.unshift('BYTES_PER_ELEMENT',\n                   'length',\n                   'byteLength',\n                   'byteOffset',\n                   'buffer');\n    }\n  } else {\n    var promiseInternals = inspectPromise(value);\n    if (promiseInternals) {\n      braces = ['{', '}'];\n      formatter = formatPromise;\n    } else {\n      let maybeSimdFormatter;\n      if (binding.isMapIterator(value)) {\n        constructor = { name: 'MapIterator' };\n        braces = ['{', '}'];\n        empty = false;\n        formatter = formatCollectionIterator;\n      } else if (binding.isSetIterator(value)) {\n        constructor = { name: 'SetIterator' };\n        braces = ['{', '}'];\n        empty = false;\n        formatter = formatCollectionIterator;\n      } else if (simdFormatters &&\n                 typeof constructor === 'function' &&\n                 (maybeSimdFormatter = simdFormatters.get(constructor))) {\n        braces = ['[', ']'];\n        formatter = maybeSimdFormatter;\n      } else {\n        // Unset the constructor to prevent \"Object {...}\" for ordinary objects.\n        if (constructor && constructor.name === 'Object')\n          constructor = null;\n        braces = ['{', '}'];\n        empty = true;  // No other data than keys.\n      }\n    }\n  }\n\n  empty = empty === true && keys.length === 0;\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    base = ` [Function${value.name ? `: ${value.name}` : ''}]`;\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toISOString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  // Make boxed primitive Strings look like such\n  if (typeof raw === 'string') {\n    formatted = formatPrimitiveNoColor(ctx, raw);\n    base = ` [String: ${formatted}]`;\n  }\n\n  // Make boxed primitive Numbers look like such\n  if (typeof raw === 'number') {\n    formatted = formatPrimitiveNoColor(ctx, raw);\n    base = ` [Number: ${formatted}]`;\n  }\n\n  // Make boxed primitive Booleans look like such\n  if (typeof raw === 'boolean') {\n    formatted = formatPrimitiveNoColor(ctx, raw);\n    base = ` [Boolean: ${formatted}]`;\n  }\n\n  // Add constructor name if available\n  if (base === '' && constructor)\n    braces[0] = `${constructor.name} ${braces[0]}`;\n\n  if (empty === true) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output = formatter(ctx, value, recurseTimes, visibleKeys, keys);\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces, ctx.breakLength);\n}\n\n\nfunction formatNumber(ctx, value) {\n  // Format -0 as '-0'. Strict equality won't distinguish 0 from -0,\n  // so instead we use the fact that 1 / -0 < 0 whereas 1 / 0 > 0 .\n  if (value === 0 && 1 / value < 0)\n    return ctx.stylize('-0', 'number');\n  return ctx.stylize('' + value, 'number');\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (value === undefined)\n    return ctx.stylize('undefined', 'undefined');\n\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null)\n    return ctx.stylize('null', 'null');\n\n  var type = typeof value;\n\n  if (type === 'string') {\n    var simple = '\\'' +\n                 JSON.stringify(value)\n                     .replace(/^\"|\"$/g, '')\n                     .replace(/'/g, \"\\\\'\")\n                     .replace(/\\\\\"/g, '\"') +\n                 '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (type === 'number')\n    return formatNumber(ctx, value);\n  if (type === 'boolean')\n    return ctx.stylize('' + value, 'boolean');\n  // es6 symbol primitive\n  if (type === 'symbol')\n    return ctx.stylize(value.toString(), 'symbol');\n}\n\n\nfunction formatPrimitiveNoColor(ctx, value) {\n  var stylize = ctx.stylize;\n  ctx.stylize = stylizeNoColor;\n  var str = formatPrimitive(ctx, value);\n  ctx.stylize = stylize;\n  return str;\n}\n\n\nfunction formatError(value) {\n  return value.stack || `[${Error.prototype.toString.call(value)}]`;\n}\n\n\nfunction formatObject(ctx, value, recurseTimes, visibleKeys, keys) {\n  return keys.map(function(key) {\n    return formatProperty(ctx, value, recurseTimes, visibleKeys, key, false);\n  });\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  const maxLength = Math.min(Math.max(0, ctx.maxArrayLength), value.length);\n  const remaining = value.length - maxLength;\n  for (var i = 0; i < maxLength; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  if (remaining > 0) {\n    output.push(`... ${remaining} more item${remaining > 1 ? 's' : ''}`);\n  }\n  keys.forEach(function(key) {\n    if (typeof key === 'symbol' || !key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatTypedArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  const maxLength = Math.min(Math.max(0, ctx.maxArrayLength), value.length);\n  const remaining = value.length - maxLength;\n  var output = new Array(maxLength);\n  for (var i = 0; i < maxLength; ++i)\n    output[i] = formatNumber(ctx, value[i]);\n  if (remaining > 0) {\n    output.push(`... ${remaining} more item${remaining > 1 ? 's' : ''}`);\n  }\n  for (const key of keys) {\n    if (typeof key === 'symbol' || !key.match(/^\\d+$/)) {\n      output.push(\n          formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n  }\n  return output;\n}\n\n\nfunction formatSet(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  value.forEach(function(v) {\n    var nextRecurseTimes = recurseTimes === null ? null : recurseTimes - 1;\n    var str = formatValue(ctx, v, nextRecurseTimes);\n    output.push(str);\n  });\n  keys.forEach(function(key) {\n    output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                               key, false));\n  });\n  return output;\n}\n\n\nfunction formatMap(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  value.forEach(function(v, k) {\n    var nextRecurseTimes = recurseTimes === null ? null : recurseTimes - 1;\n    var str = formatValue(ctx, k, nextRecurseTimes);\n    str += ' => ';\n    str += formatValue(ctx, v, nextRecurseTimes);\n    output.push(str);\n  });\n  keys.forEach(function(key) {\n    output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                               key, false));\n  });\n  return output;\n}\n\nfunction formatCollectionIterator(ctx, value, recurseTimes, visibleKeys, keys) {\n  ensureDebugIsInitialized();\n  const mirror = Debug.MakeMirror(value, true);\n  var nextRecurseTimes = recurseTimes === null ? null : recurseTimes - 1;\n  var vals = mirror.preview();\n  var output = [];\n  for (const o of vals) {\n    output.push(formatValue(ctx, o, nextRecurseTimes));\n  }\n  return output;\n}\n\nfunction formatPromise(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  var internals = inspectPromise(value);\n  if (internals.status === 'pending') {\n    output.push('<pending>');\n  } else {\n    var nextRecurseTimes = recurseTimes === null ? null : recurseTimes - 1;\n    var str = formatValue(ctx, internals.value, nextRecurseTimes);\n    if (internals.status === 'rejected') {\n      output.push('<rejected> ' + str);\n    } else {\n      output.push(str);\n    }\n  }\n  keys.forEach(function(key) {\n    output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                               key, false));\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    if (typeof key === 'symbol') {\n      name = `[${ctx.stylize(key.toString(), 'symbol')}]`;\n    } else {\n      name = `[${key}]`;\n    }\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.replace(/\\n/g, '\\n  ');\n        } else {\n          str = str.replace(/(^|\\n)/g, '\\n   ');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (name === undefined) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\")\n                 .replace(/\\\\\\\\/g, '\\\\');\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return `${name}: ${str}`;\n}\n\n\nfunction reduceToSingleString(output, base, braces, breakLength) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > breakLength) {\n    return braces[0] +\n           // If the opening \"brace\" is too large, like in the case of \"Set {\",\n           // we need to force the first item to be on the next line or the\n           // items will not line up correctly.\n           (base === '' && braces[0].length === 1 ? '' : base + '\\n ') +\n           ` ${output.join(',\\n  ')} ${braces[1]}`;\n  }\n\n  return `${braces[0]}${base} ${output.join(', ')} ${braces[1]}`;\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.isArray = Array.isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg === null || arg === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === undefined;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return binding.isRegExp(re);\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return arg !== null && typeof arg === 'object';\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return binding.isDate(d);\n}\nexports.isDate = isDate;\n\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg !== 'object' && typeof arg !== 'function';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n                'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n * @throws {TypeError} Will error if either constructor is null, or if\n *     the super constructor lacks a prototype.\n */\nexports.inherits = function(ctor, superCtor) {\n\n  if (ctor === undefined || ctor === null)\n    throw new TypeError('The constructor to \"inherits\" must not be ' +\n                        'null or undefined');\n\n  if (superCtor === undefined || superCtor === null)\n    throw new TypeError('The super constructor to \"inherits\" must not ' +\n                        'be null or undefined');\n\n  if (superCtor.prototype === undefined)\n    throw new TypeError('The super constructor to \"inherits\" must ' +\n                        'have a prototype');\n\n  ctor.super_ = superCtor;\n  Object.setPrototypeOf(ctor.prototype, superCtor.prototype);\n};\n\nexports._extend = function(target, source) {\n  // Don't do anything if source isn't an object\n  if (source === null || typeof source !== 'object') return target;\n\n  var keys = Object.keys(source);\n  var i = keys.length;\n  while (i--) {\n    target[keys[i]] = source[keys[i]];\n  }\n  return target;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n// Deprecated old stuff.\n\nexports.print = internalUtil.deprecate(function() {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    process.stdout.write(String(arguments[i]));\n  }\n}, 'util.print is deprecated. Use console.log instead.');\n\n\nexports.puts = internalUtil.deprecate(function() {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    process.stdout.write(arguments[i] + '\\n');\n  }\n}, 'util.puts is deprecated. Use console.log instead.');\n\n\nexports.debug = internalUtil.deprecate(function(x) {\n  process.stderr.write(`DEBUG: ${x}\\n`);\n}, 'util.debug is deprecated. Use console.error instead.');\n\n\nexports.error = internalUtil.deprecate(function(x) {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    process.stderr.write(arguments[i] + '\\n');\n  }\n}, 'util.error is deprecated. Use console.error instead.');\n\n\nexports._errnoException = function(err, syscall, original) {\n  var errname = uv.errname(err);\n  var message = `${syscall} ${errname}`;\n  if (original)\n    message += ' ' + original;\n  var e = new Error(message);\n  e.code = errname;\n  e.errno = errname;\n  e.syscall = syscall;\n  return e;\n};\n\n\nexports._exceptionWithHostPort = function(err,\n                                          syscall,\n                                          address,\n                                          port,\n                                          additional) {\n  var details;\n  if (port && port > 0) {\n    details = `${address}:${port}`;\n  } else {\n    details = address;\n  }\n\n  if (additional) {\n    details += ` - Local (${additional})`;\n  }\n  var ex = exports._errnoException(err, syscall, details);\n  ex.address = address;\n  if (port) {\n    ex.port = port;\n  }\n  return ex;\n};\n\n});"}
{"type":"var","id":73,"name":"f","val":"time:     20:20:17"}
{"type":"var","id":74,"name":"arguments","val":"Arguments[1]"}
{"type":"var","id":75,"name":"index","val":"[undefined]"}
{"type":"var","id":76,"name":"argLen","val":"[undefined]"}
{"type":"var","id":77,"name":"str","val":"[undefined]"}
{"type":"var","id":78,"name":"a","val":"[undefined]"}
{"type":"var","id":79,"name":"lastPos","val":"[undefined]"}
{"type":"var","id":80,"name":"i","val":"[undefined]"}
{"type":"scope","id":18,"scope":{"type":"local","name":"exports.format","vars":[73,74,75,76,77,78,79,80]}}
{"type":"var","id":81,"name":"exports","val":"Object"}
{"type":"var","id":82,"name":"uv","val":"Object"}
{"type":"var","id":83,"name":"binding","val":"Object"}
{"type":"var","id":84,"name":"isError","val":"[Function]"}
{"type":"var","id":85,"name":"inspectDefaultOptions","val":"Object"}
{"type":"var","id":86,"name":"Debug","val":"[undefined]"}
{"type":"var","id":87,"name":"simdFormatters","val":"[undefined]"}
{"type":"var","id":88,"name":"tryStringify","val":"[Function]"}
{"type":"var","id":89,"name":"debugs","val":"Object"}
{"type":"var","id":90,"name":"debugEnviron","val":""}
{"type":"var","id":91,"name":"inspect","val":"[Function]"}
{"type":"var","id":92,"name":"customInspectSymbol","val":"Symbol(util.inspect.custom)"}
{"type":"var","id":93,"name":"stylizeWithColor","val":"[Function]"}
{"type":"var","id":94,"name":"stylizeNoColor","val":"[Function]"}
{"type":"var","id":95,"name":"arrayToHash","val":"[Function]"}
{"type":"var","id":96,"name":"getConstructorOf","val":"[Function]"}
{"type":"var","id":97,"name":"ensureDebugIsInitialized","val":"[Function]"}
{"type":"var","id":98,"name":"inspectPromise","val":"[Function]"}
{"type":"var","id":99,"name":"formatValue","val":"[Function]"}
{"type":"var","id":100,"name":"formatNumber","val":"[Function]"}
{"type":"var","id":101,"name":"formatPrimitive","val":"[Function]"}
{"type":"var","id":102,"name":"formatPrimitiveNoColor","val":"[Function]"}
{"type":"var","id":103,"name":"formatError","val":"[Function]"}
{"type":"var","id":104,"name":"formatObject","val":"[Function]"}
{"type":"var","id":105,"name":"formatArray","val":"[Function]"}
{"type":"var","id":106,"name":"formatTypedArray","val":"[Function]"}
{"type":"var","id":107,"name":"formatSet","val":"[Function]"}
{"type":"var","id":108,"name":"formatMap","val":"[Function]"}
{"type":"var","id":109,"name":"formatCollectionIterator","val":"[Function]"}
{"type":"var","id":110,"name":"formatPromise","val":"[Function]"}
{"type":"var","id":111,"name":"formatProperty","val":"[Function]"}
{"type":"var","id":112,"name":"reduceToSingleString","val":"[Function]"}
{"type":"var","id":113,"name":"isRegExp","val":"[Function]"}
{"type":"var","id":114,"name":"isDate","val":"[Function]"}
{"type":"var","id":115,"name":"pad","val":"[Function]"}
{"type":"var","id":116,"name":"months","val":"Array[12]"}
{"type":"var","id":117,"name":"timestamp","val":"[Function]"}
{"type":"var","id":118,"name":"hasOwnProperty","val":"[Function]"}
{"type":"scope","id":19,"scope":{"type":"closure","vars":[70,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118]}}
{"type":"frame","id":24,"frame":{"fn":"exports.format","script":"37","line":68,"col":2,"scopes":[18,19]}}
{"type":"frame","id":25,"frame":{"fn":"Console.log","script":"61","line":42,"col":36,"scopes":[16,17]}}
{"date":1485030017653,"type":"break","frames":[24,25,23,1,2,3]}
{"type":"frame","id":26,"frame":{"fn":"exports.format","script":"37","line":76,"col":24,"scopes":[18,19]}}
{"date":1485030017667,"type":"break","frames":[26,25,23,1,2,3]}
{"type":"var","id":119,"name":"argLen","val":1}
{"type":"scope","id":20,"scope":{"type":"local","name":"exports.format","vars":[73,74,75,119,77,78,79,80]}}
{"type":"frame","id":27,"frame":{"fn":"exports.format","script":"37","line":78,"col":2,"scopes":[20,19]}}
{"date":1485030017682,"type":"break","frames":[27,25,23,1,2,3]}
{"type":"frame","id":28,"frame":{"fn":"exports.format","script":"37","line":133,"col":0,"scopes":[20,19]}}
{"date":1485030017694,"type":"break","frames":[28,25,23,1,2,3]}
{"type":"script","id":"63","url":"net.js","endLine":1617,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst EventEmitter = require('events');\nconst stream = require('stream');\nconst timers = require('timers');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst internalNet = require('internal/net');\nconst assert = require('assert');\nconst cares = process.binding('cares_wrap');\nconst uv = process.binding('uv');\n\nconst Buffer = require('buffer').Buffer;\nconst TTYWrap = process.binding('tty_wrap');\nconst TCP = process.binding('tcp_wrap').TCP;\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst TCPConnectWrap = process.binding('tcp_wrap').TCPConnectWrap;\nconst PipeConnectWrap = process.binding('pipe_wrap').PipeConnectWrap;\nconst ShutdownWrap = process.binding('stream_wrap').ShutdownWrap;\nconst WriteWrap = process.binding('stream_wrap').WriteWrap;\n\n\nvar cluster;\nconst errnoException = util._errnoException;\nconst exceptionWithHostPort = util._exceptionWithHostPort;\nconst isLegalPort = internalNet.isLegalPort;\nconst assertPort = internalNet.assertPort;\n\nfunction noop() {}\n\nfunction createHandle(fd) {\n  var type = TTYWrap.guessHandleType(fd);\n  if (type === 'PIPE') return new Pipe();\n  if (type === 'TCP') return new TCP();\n  throw new TypeError('Unsupported fd type: ' + type);\n}\n\n\nconst debug = util.debuglog('net');\n\nfunction isPipeName(s) {\n  return typeof s === 'string' && toNumber(s) === false;\n}\n\nexports.createServer = function(options, connectionListener) {\n  return new Server(options, connectionListener);\n};\n\n\n// Target API:\n//\n// var s = net.connect({port: 80, host: 'google.com'}, function() {\n//   ...\n// });\n//\n// There are various forms:\n//\n// connect(options, [cb])\n// connect(port, [host], [cb])\n// connect(path, [cb]);\n//\nexports.connect = exports.createConnection = function() {\n  var args = new Array(arguments.length);\n  for (var i = 0; i < arguments.length; i++)\n    args[i] = arguments[i];\n  args = normalizeConnectArgs(args);\n  debug('createConnection', args);\n  var s = new Socket(args[0]);\n\n  if (args[0].timeout) {\n    s.setTimeout(args[0].timeout);\n  }\n\n  return Socket.prototype.connect.apply(s, args);\n};\n\n// Returns an array [options] or [options, cb]\n// It is the same as the argument of Socket.prototype.connect().\nfunction normalizeConnectArgs(args) {\n  var options = {};\n\n  if (args.length === 0) {\n    return [options];\n  } else if (args[0] !== null && typeof args[0] === 'object') {\n    // connect(options, [cb])\n    options = args[0];\n  } else if (isPipeName(args[0])) {\n    // connect(path, [cb]);\n    options.path = args[0];\n  } else {\n    // connect(port, [host], [cb])\n    options.port = args[0];\n    if (args.length > 1 && typeof args[1] === 'string') {\n      options.host = args[1];\n    }\n  }\n\n  var cb = args[args.length - 1];\n  return typeof cb === 'function' ? [options, cb] : [options];\n}\nexports._normalizeConnectArgs = normalizeConnectArgs;\n\n\n// called when creating new Socket, or when re-using a closed Socket\nfunction initSocketHandle(self) {\n  self.destroyed = false;\n  self._bytesDispatched = 0;\n  self._sockname = null;\n\n  // Handle creation may be deferred to bind() or connect() time.\n  if (self._handle) {\n    self._handle.owner = self;\n    self._handle.onread = onread;\n\n    // If handle doesn't support writev - neither do we\n    if (!self._handle.writev)\n      self._writev = null;\n  }\n}\n\n\nconst BYTES_READ = Symbol('bytesRead');\n\n\nfunction Socket(options) {\n  if (!(this instanceof Socket)) return new Socket(options);\n\n  this.connecting = false;\n  this._hadError = false;\n  this._handle = null;\n  this._parent = null;\n  this._host = null;\n\n  if (typeof options === 'number')\n    options = { fd: options }; // Legacy interface.\n  else if (options === undefined)\n    options = {};\n\n  stream.Duplex.call(this, options);\n\n  if (options.handle) {\n    this._handle = options.handle; // private\n  } else if (options.fd !== undefined) {\n    this._handle = createHandle(options.fd);\n    this._handle.open(options.fd);\n    if ((options.fd == 1 || options.fd == 2) &&\n        (this._handle instanceof Pipe) &&\n        process.platform === 'win32') {\n      // Make stdout and stderr blocking on Windows\n      var err = this._handle.setBlocking(true);\n      if (err)\n        throw errnoException(err, 'setBlocking');\n    }\n    this.readable = options.readable !== false;\n    this.writable = options.writable !== false;\n  } else {\n    // these will be set once there is a connection\n    this.readable = this.writable = false;\n  }\n\n  // shut down the socket when we're finished with it.\n  this.on('finish', onSocketFinish);\n  this.on('_socketEnd', onSocketEnd);\n\n  initSocketHandle(this);\n\n  this._pendingData = null;\n  this._pendingEncoding = '';\n\n  // handle strings directly\n  this._writableState.decodeStrings = false;\n\n  // default to *not* allowing half open sockets\n  this.allowHalfOpen = options && options.allowHalfOpen || false;\n\n  // if we have a handle, then start the flow of data into the\n  // buffer.  if not, then this will happen when we connect\n  if (this._handle && options.readable !== false) {\n    if (options.pauseOnCreate) {\n      // stop the handle from reading and pause the stream\n      this._handle.reading = false;\n      this._handle.readStop();\n      this._readableState.flowing = false;\n    } else {\n      this.read(0);\n    }\n  }\n\n  // Reserve properties\n  this.server = null;\n  this._server = null;\n\n  // Used after `.destroy()`\n  this[BYTES_READ] = 0;\n}\nutil.inherits(Socket, stream.Duplex);\n\nSocket.prototype._unrefTimer = function _unrefTimer() {\n  for (var s = this; s !== null; s = s._parent)\n    timers._unrefActive(s);\n};\n\n// the user has called .end(), and all the bytes have been\n// sent out to the other side.\n// If allowHalfOpen is false, or if the readable side has\n// ended already, then destroy.\n// If allowHalfOpen is true, then we need to do a shutdown,\n// so that only the writable side will be cleaned up.\nfunction onSocketFinish() {\n  // If still connecting - defer handling 'finish' until 'connect' will happen\n  if (this.connecting) {\n    debug('osF: not yet connected');\n    return this.once('connect', onSocketFinish);\n  }\n\n  debug('onSocketFinish');\n  if (!this.readable || this._readableState.ended) {\n    debug('oSF: ended, destroy', this._readableState);\n    return this.destroy();\n  }\n\n  debug('oSF: not ended, call shutdown()');\n\n  // otherwise, just shutdown, or destroy() if not possible\n  if (!this._handle || !this._handle.shutdown)\n    return this.destroy();\n\n  var req = new ShutdownWrap();\n  req.oncomplete = afterShutdown;\n  req.handle = this._handle;\n  var err = this._handle.shutdown(req);\n\n  if (err)\n    return this._destroy(errnoException(err, 'shutdown'));\n}\n\n\nfunction afterShutdown(status, handle, req) {\n  var self = handle.owner;\n\n  debug('afterShutdown destroyed=%j', self.destroyed,\n        self._readableState);\n\n  // callback may come after call to destroy.\n  if (self.destroyed)\n    return;\n\n  if (self._readableState.ended) {\n    debug('readableState ended, destroying');\n    self.destroy();\n  } else {\n    self.once('_socketEnd', self.destroy);\n  }\n}\n\n// the EOF has been received, and no more bytes are coming.\n// if the writable side has ended already, then clean everything\n// up.\nfunction onSocketEnd() {\n  // XXX Should not have to do as much crap in this function.\n  // ended should already be true, since this is called *after*\n  // the EOF errno and onread has eof'ed\n  debug('onSocketEnd', this._readableState);\n  this._readableState.ended = true;\n  if (this._readableState.endEmitted) {\n    this.readable = false;\n    maybeDestroy(this);\n  } else {\n    this.once('end', function() {\n      this.readable = false;\n      maybeDestroy(this);\n    });\n    this.read(0);\n  }\n\n  if (!this.allowHalfOpen) {\n    this.write = writeAfterFIN;\n    this.destroySoon();\n  }\n}\n\n// Provide a better error message when we call end() as a result\n// of the other side sending a FIN.  The standard 'write after end'\n// is overly vague, and makes it seem like the user's code is to blame.\nfunction writeAfterFIN(chunk, encoding, cb) {\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  var er = new Error('This socket has been ended by the other party');\n  er.code = 'EPIPE';\n  // TODO: defer error events consistently everywhere, not just the cb\n  this.emit('error', er);\n  if (typeof cb === 'function') {\n    process.nextTick(cb, er);\n  }\n}\n\nexports.Socket = Socket;\nexports.Stream = Socket; // Legacy naming.\n\nSocket.prototype.read = function(n) {\n  if (n === 0)\n    return stream.Readable.prototype.read.call(this, n);\n\n  this.read = stream.Readable.prototype.read;\n  this._consuming = true;\n  return this.read(n);\n};\n\n\nSocket.prototype.listen = function() {\n  debug('socket.listen');\n  this.on('connection', arguments[0]);\n  listen(this, null, null, null);\n};\n\n\nSocket.prototype.setTimeout = function(msecs, callback) {\n  if (msecs === 0) {\n    timers.unenroll(this);\n    if (callback) {\n      this.removeListener('timeout', callback);\n    }\n  } else {\n    timers.enroll(this, msecs);\n    timers._unrefActive(this);\n    if (callback) {\n      this.once('timeout', callback);\n    }\n  }\n  return this;\n};\n\n\nSocket.prototype._onTimeout = function() {\n  debug('_onTimeout');\n  this.emit('timeout');\n};\n\n\nSocket.prototype.setNoDelay = function(enable) {\n  if (!this._handle) {\n    this.once('connect',\n              enable ? this.setNoDelay : () => this.setNoDelay(enable));\n    return this;\n  }\n\n  // backwards compatibility: assume true when `enable` is omitted\n  if (this._handle.setNoDelay)\n    this._handle.setNoDelay(enable === undefined ? true : !!enable);\n\n  return this;\n};\n\n\nSocket.prototype.setKeepAlive = function(setting, msecs) {\n  if (!this._handle) {\n    this.once('connect', () => this.setKeepAlive(setting, msecs));\n    return this;\n  }\n\n  if (this._handle.setKeepAlive)\n    this._handle.setKeepAlive(setting, ~~(msecs / 1000));\n\n  return this;\n};\n\n\nSocket.prototype.address = function() {\n  return this._getsockname();\n};\n\n\nObject.defineProperty(Socket.prototype, '_connecting', {\n  get: function() {\n    return this.connecting;\n  }\n});\n\n\nObject.defineProperty(Socket.prototype, 'readyState', {\n  get: function() {\n    if (this.connecting) {\n      return 'opening';\n    } else if (this.readable && this.writable) {\n      return 'open';\n    } else if (this.readable && !this.writable) {\n      return 'readOnly';\n    } else if (!this.readable && this.writable) {\n      return 'writeOnly';\n    } else {\n      return 'closed';\n    }\n  }\n});\n\n\nObject.defineProperty(Socket.prototype, 'bufferSize', {\n  get: function() {\n    if (this._handle) {\n      return this._handle.writeQueueSize + this._writableState.length;\n    }\n  }\n});\n\n\n// Just call handle.readStart until we have enough in the buffer\nSocket.prototype._read = function(n) {\n  debug('_read');\n\n  if (this.connecting || !this._handle) {\n    debug('_read wait for connection');\n    this.once('connect', () => this._read(n));\n  } else if (!this._handle.reading) {\n    // not already reading, start the flow\n    debug('Socket._read readStart');\n    this._handle.reading = true;\n    var err = this._handle.readStart();\n    if (err)\n      this._destroy(errnoException(err, 'read'));\n  }\n};\n\n\nSocket.prototype.end = function(data, encoding) {\n  stream.Duplex.prototype.end.call(this, data, encoding);\n  this.writable = false;\n  DTRACE_NET_STREAM_END(this);\n  ;\n\n  // just in case we're waiting for an EOF.\n  if (this.readable && !this._readableState.endEmitted)\n    this.read(0);\n  else\n    maybeDestroy(this);\n};\n\n\n// Call whenever we set writable=false or readable=false\nfunction maybeDestroy(socket) {\n  if (!socket.readable &&\n      !socket.writable &&\n      !socket.destroyed &&\n      !socket.connecting &&\n      !socket._writableState.length) {\n    socket.destroy();\n  }\n}\n\n\nSocket.prototype.destroySoon = function() {\n  if (this.writable)\n    this.end();\n\n  if (this._writableState.finished)\n    this.destroy();\n  else\n    this.once('finish', this.destroy);\n};\n\n\nSocket.prototype._destroy = function(exception, cb) {\n  debug('destroy');\n\n  function fireErrorCallbacks(self) {\n    if (cb) cb(exception);\n    if (exception && !self._writableState.errorEmitted) {\n      process.nextTick(emitErrorNT, self, exception);\n      self._writableState.errorEmitted = true;\n    }\n  }\n\n  if (this.destroyed) {\n    debug('already destroyed, fire error callbacks');\n    fireErrorCallbacks(this);\n    return;\n  }\n\n  this.connecting = false;\n\n  this.readable = this.writable = false;\n\n  for (var s = this; s !== null; s = s._parent)\n    timers.unenroll(s);\n\n  debug('close');\n  if (this._handle) {\n    if (this !== process.stderr)\n      debug('close handle');\n    var isException = exception ? true : false;\n    // `bytesRead` should be accessible after `.destroy()`\n    this[BYTES_READ] = this._handle.bytesRead;\n\n    this._handle.close(() => {\n      debug('emit close');\n      this.emit('close', isException);\n    });\n    this._handle.onread = noop;\n    this._handle = null;\n    this._sockname = null;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case Socket.prototype.destroy()\n  // is called within callbacks\n  this.destroyed = true;\n  fireErrorCallbacks(this);\n\n  if (this._server) {\n    ;\n    debug('has server');\n    this._server._connections--;\n    if (this._server._emitCloseIfDrained) {\n      this._server._emitCloseIfDrained();\n    }\n  }\n};\n\n\nSocket.prototype.destroy = function(exception) {\n  debug('destroy', exception);\n  this._destroy(exception);\n};\n\n\n// This function is called whenever the handle gets a\n// buffer, or when there's an error reading.\nfunction onread(nread, buffer) {\n  var handle = this;\n  var self = handle.owner;\n  assert(handle === self._handle, 'handle != self._handle');\n\n  self._unrefTimer();\n\n  debug('onread', nread);\n\n  if (nread > 0) {\n    debug('got data');\n\n    // read success.\n    // In theory (and in practice) calling readStop right now\n    // will prevent this from being called again until _read() gets\n    // called again.\n\n    // Optimization: emit the original buffer with end points\n    var ret = self.push(buffer);\n\n    if (handle.reading && !ret) {\n      handle.reading = false;\n      debug('readStop');\n      var err = handle.readStop();\n      if (err)\n        self._destroy(errnoException(err, 'read'));\n    }\n    return;\n  }\n\n  // if we didn't get any bytes, that doesn't necessarily mean EOF.\n  // wait for the next one.\n  if (nread === 0) {\n    debug('not any data, keep waiting');\n    return;\n  }\n\n  // Error, possibly EOF.\n  if (nread !== uv.UV_EOF) {\n    return self._destroy(errnoException(nread, 'read'));\n  }\n\n  debug('EOF');\n\n  // push a null to signal the end of data.\n  // Do it before `maybeDestroy` for correct order of events:\n  // `end` -> `close`\n  self.push(null);\n\n  if (self._readableState.length === 0) {\n    self.readable = false;\n    maybeDestroy(self);\n  }\n\n  // internal end event so that we know that the actual socket\n  // is no longer readable, and we can start the shutdown\n  // procedure. No need to wait for all the data to be consumed.\n  self.emit('_socketEnd');\n}\n\n\nSocket.prototype._getpeername = function() {\n  if (!this._peername) {\n    if (!this._handle || !this._handle.getpeername) {\n      return {};\n    }\n    var out = {};\n    var err = this._handle.getpeername(out);\n    if (err) return {};  // FIXME(bnoordhuis) Throw?\n    this._peername = out;\n  }\n  return this._peername;\n};\n\nfunction protoGetter(name, callback) {\n  Object.defineProperty(Socket.prototype, name, {\n    configurable: false,\n    enumerable: true,\n    get: callback\n  });\n}\n\nprotoGetter('bytesRead', function bytesRead() {\n  return this._handle ? this._handle.bytesRead : this[BYTES_READ];\n});\n\nprotoGetter('remoteAddress', function remoteAddress() {\n  return this._getpeername().address;\n});\n\nprotoGetter('remoteFamily', function remoteFamily() {\n  return this._getpeername().family;\n});\n\nprotoGetter('remotePort', function remotePort() {\n  return this._getpeername().port;\n});\n\n\nSocket.prototype._getsockname = function() {\n  if (!this._handle || !this._handle.getsockname) {\n    return {};\n  }\n  if (!this._sockname) {\n    var out = {};\n    var err = this._handle.getsockname(out);\n    if (err) return {};  // FIXME(bnoordhuis) Throw?\n    this._sockname = out;\n  }\n  return this._sockname;\n};\n\n\nprotoGetter('localAddress', function localAddress() {\n  return this._getsockname().address;\n});\n\n\nprotoGetter('localPort', function localPort() {\n  return this._getsockname().port;\n});\n\n\nSocket.prototype.write = function(chunk, encoding, cb) {\n  if (typeof chunk !== 'string' && !(chunk instanceof Buffer)) {\n    throw new TypeError(\n      'Invalid data, chunk must be a string or buffer, not ' + typeof chunk);\n  }\n  return stream.Duplex.prototype.write.apply(this, arguments);\n};\n\n\nSocket.prototype._writeGeneric = function(writev, data, encoding, cb) {\n  // If we are still connecting, then buffer this for later.\n  // The Writable logic will buffer up any more writes while\n  // waiting for this one to be done.\n  if (this.connecting) {\n    this._pendingData = data;\n    this._pendingEncoding = encoding;\n    this.once('connect', function() {\n      this._writeGeneric(writev, data, encoding, cb);\n    });\n    return;\n  }\n  this._pendingData = null;\n  this._pendingEncoding = '';\n\n  this._unrefTimer();\n\n  if (!this._handle) {\n    this._destroy(new Error('This socket is closed'), cb);\n    return false;\n  }\n\n  var req = new WriteWrap();\n  req.handle = this._handle;\n  req.oncomplete = afterWrite;\n  req.async = false;\n  var err;\n\n  if (writev) {\n    var chunks = new Array(data.length << 1);\n    for (var i = 0; i < data.length; i++) {\n      var entry = data[i];\n      chunks[i * 2] = entry.chunk;\n      chunks[i * 2 + 1] = entry.encoding;\n    }\n    err = this._handle.writev(req, chunks);\n\n    // Retain chunks\n    if (err === 0) req._chunks = chunks;\n  } else {\n    var enc;\n    if (data instanceof Buffer) {\n      enc = 'buffer';\n    } else {\n      enc = encoding;\n    }\n    err = createWriteReq(req, this._handle, data, enc);\n  }\n\n  if (err)\n    return this._destroy(errnoException(err, 'write', req.error), cb);\n\n  this._bytesDispatched += req.bytes;\n\n  // If it was entirely flushed, we can write some more right now.\n  // However, if more is left in the queue, then wait until that clears.\n  if (req.async && this._handle.writeQueueSize != 0)\n    req.cb = cb;\n  else\n    cb();\n};\n\n\nSocket.prototype._writev = function(chunks, cb) {\n  this._writeGeneric(true, chunks, '', cb);\n};\n\n\nSocket.prototype._write = function(data, encoding, cb) {\n  this._writeGeneric(false, data, encoding, cb);\n};\n\nfunction createWriteReq(req, handle, data, encoding) {\n  switch (encoding) {\n    case 'latin1':\n    case 'binary':\n      return handle.writeLatin1String(req, data);\n\n    case 'buffer':\n      return handle.writeBuffer(req, data);\n\n    case 'utf8':\n    case 'utf-8':\n      return handle.writeUtf8String(req, data);\n\n    case 'ascii':\n      return handle.writeAsciiString(req, data);\n\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return handle.writeUcs2String(req, data);\n\n    default:\n      return handle.writeBuffer(req, Buffer.from(data, encoding));\n  }\n}\n\n\nprotoGetter('bytesWritten', function bytesWritten() {\n  var bytes = this._bytesDispatched;\n  const state = this._writableState;\n  const data = this._pendingData;\n  const encoding = this._pendingEncoding;\n\n  if (!state)\n    return undefined;\n\n  state.getBuffer().forEach(function(el) {\n    if (el.chunk instanceof Buffer)\n      bytes += el.chunk.length;\n    else\n      bytes += Buffer.byteLength(el.chunk, el.encoding);\n  });\n\n  if (data) {\n    if (data instanceof Buffer)\n      bytes += data.length;\n    else\n      bytes += Buffer.byteLength(data, encoding);\n  }\n\n  return bytes;\n});\n\n\nfunction afterWrite(status, handle, req, err) {\n  var self = handle.owner;\n  if (self !== process.stderr && self !== process.stdout)\n    debug('afterWrite', status);\n\n  // callback may come after call to destroy.\n  if (self.destroyed) {\n    debug('afterWrite destroyed');\n    return;\n  }\n\n  if (status < 0) {\n    var ex = errnoException(status, 'write', req.error);\n    debug('write failure', ex);\n    self._destroy(ex, req.cb);\n    return;\n  }\n\n  self._unrefTimer();\n\n  if (self !== process.stderr && self !== process.stdout)\n    debug('afterWrite call cb');\n\n  if (req.cb)\n    req.cb.call(self);\n}\n\n\nfunction connect(self, address, port, addressType, localAddress, localPort) {\n  // TODO return promise from Socket.prototype.connect which\n  // wraps _connectReq.\n\n  assert.ok(self.connecting);\n\n  var err;\n\n  if (localAddress || localPort) {\n    var bind;\n\n    if (addressType === 4) {\n      localAddress = localAddress || '0.0.0.0';\n      bind = self._handle.bind;\n    } else if (addressType === 6) {\n      localAddress = localAddress || '::';\n      bind = self._handle.bind6;\n    } else {\n      self._destroy(new TypeError('Invalid addressType: ' + addressType));\n      return;\n    }\n\n    debug('binding to localAddress: %s and localPort: %d',\n          localAddress,\n          localPort);\n\n    bind = bind.bind(self._handle);\n    err = bind(localAddress, localPort);\n\n    if (err) {\n      const ex = exceptionWithHostPort(err, 'bind', localAddress, localPort);\n      self._destroy(ex);\n      return;\n    }\n  }\n\n  if (addressType === 6 || addressType === 4) {\n    const req = new TCPConnectWrap();\n    req.oncomplete = afterConnect;\n    req.address = address;\n    req.port = port;\n    req.localAddress = localAddress;\n    req.localPort = localPort;\n\n    if (addressType === 4)\n      err = self._handle.connect(req, address, port);\n    else\n      err = self._handle.connect6(req, address, port);\n\n  } else {\n    const req = new PipeConnectWrap();\n    req.address = address;\n    req.oncomplete = afterConnect;\n    err = self._handle.connect(req, address, afterConnect);\n  }\n\n  if (err) {\n    var sockname = self._getsockname();\n    var details;\n\n    if (sockname) {\n      details = sockname.address + ':' + sockname.port;\n    }\n\n    const ex = exceptionWithHostPort(err, 'connect', address, port, details);\n    self._destroy(ex);\n  }\n}\n\n\nSocket.prototype.connect = function(options, cb) {\n  if (this.write !== Socket.prototype.write)\n    this.write = Socket.prototype.write;\n\n  if (options === null || typeof options !== 'object') {\n    // Old API:\n    // connect(port, [host], [cb])\n    // connect(path, [cb]);\n    var args = new Array(arguments.length);\n    for (var i = 0; i < arguments.length; i++)\n      args[i] = arguments[i];\n    args = normalizeConnectArgs(args);\n    return Socket.prototype.connect.apply(this, args);\n  }\n\n  if (this.destroyed) {\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n    this.destroyed = false;\n    this._handle = null;\n    this._peername = null;\n    this._sockname = null;\n  }\n\n  var pipe = !!options.path;\n  debug('pipe', pipe, options.path);\n\n  if (!this._handle) {\n    this._handle = pipe ? new Pipe() : new TCP();\n    initSocketHandle(this);\n  }\n\n  if (typeof cb === 'function') {\n    this.once('connect', cb);\n  }\n\n  this._unrefTimer();\n\n  this.connecting = true;\n  this.writable = true;\n\n  if (pipe) {\n    connect(this, options.path);\n  } else {\n    lookupAndConnect(this, options);\n  }\n  return this;\n};\n\n\nfunction lookupAndConnect(self, options) {\n  const dns = require('dns');\n  var host = options.host || 'localhost';\n  var port = options.port;\n  var localAddress = options.localAddress;\n  var localPort = options.localPort;\n\n  if (localAddress && !exports.isIP(localAddress))\n    throw new TypeError('\"localAddress\" option must be a valid IP: ' +\n                        localAddress);\n\n  if (localPort && typeof localPort !== 'number')\n    throw new TypeError('\"localPort\" option should be a number: ' + localPort);\n\n  if (typeof port !== 'undefined') {\n    if (typeof port !== 'number' && typeof port !== 'string')\n      throw new TypeError('\"port\" option should be a number or string: ' +\n                          port);\n    if (!isLegalPort(port))\n      throw new RangeError('\"port\" option should be >= 0 and < 65536: ' + port);\n  }\n  port |= 0;\n\n  // If host is an IP, skip performing a lookup\n  var addressType = exports.isIP(host);\n  if (addressType) {\n    process.nextTick(function() {\n      if (self.connecting)\n        connect(self, host, port, addressType, localAddress, localPort);\n    });\n    return;\n  }\n\n  if (options.lookup && typeof options.lookup !== 'function')\n    throw new TypeError('\"lookup\" option should be a function');\n\n  var dnsopts = {\n    family: options.family,\n    hints: options.hints || 0\n  };\n\n  if (dnsopts.family !== 4 && dnsopts.family !== 6 && dnsopts.hints === 0) {\n    dnsopts.hints = dns.ADDRCONFIG;\n  }\n\n  debug('connect: find host ' + host);\n  debug('connect: dns options', dnsopts);\n  self._host = host;\n  var lookup = options.lookup || dns.lookup;\n  lookup(host, dnsopts, function(err, ip, addressType) {\n    self.emit('lookup', err, ip, addressType, host);\n\n    // It's possible we were destroyed while looking this up.\n    // XXX it would be great if we could cancel the promise returned by\n    // the look up.\n    if (!self.connecting) return;\n\n    if (err) {\n      // net.createConnection() creates a net.Socket object and\n      // immediately calls net.Socket.connect() on it (that's us).\n      // There are no event listeners registered yet so defer the\n      // error event to the next tick.\n      err.host = options.host;\n      err.port = options.port;\n      err.message = err.message + ' ' + options.host + ':' + options.port;\n      process.nextTick(connectErrorNT, self, err);\n    } else {\n      self._unrefTimer();\n      connect(self,\n              ip,\n              port,\n              addressType,\n              localAddress,\n              localPort);\n    }\n  });\n}\n\n\nfunction connectErrorNT(self, err) {\n  self.emit('error', err);\n  self._destroy();\n}\n\n\nSocket.prototype.ref = function() {\n  if (!this._handle) {\n    this.once('connect', this.ref);\n    return this;\n  }\n\n  this._handle.ref();\n\n  return this;\n};\n\n\nSocket.prototype.unref = function() {\n  if (!this._handle) {\n    this.once('connect', this.unref);\n    return this;\n  }\n\n  this._handle.unref();\n\n  return this;\n};\n\n\nfunction afterConnect(status, handle, req, readable, writable) {\n  var self = handle.owner;\n\n  // callback may come after call to destroy\n  if (self.destroyed) {\n    return;\n  }\n\n  // Update handle if it was wrapped\n  // TODO(indutny): assert that the handle is actually an ancestor of old one\n  handle = self._handle;\n\n  debug('afterConnect');\n\n  assert.ok(self.connecting);\n  self.connecting = false;\n  self._sockname = null;\n\n  if (status == 0) {\n    self.readable = readable;\n    self.writable = writable;\n    self._unrefTimer();\n\n    self.emit('connect');\n\n    // start the first read, or get an immediate EOF.\n    // this doesn't actually consume any bytes, because len=0.\n    if (readable && !self.isPaused())\n      self.read(0);\n\n  } else {\n    self.connecting = false;\n    var details;\n    if (req.localAddress && req.localPort) {\n      details = req.localAddress + ':' + req.localPort;\n    }\n    var ex = exceptionWithHostPort(status,\n                                   'connect',\n                                   req.address,\n                                   req.port,\n                                   details);\n    if (details) {\n      ex.localAddress = req.localAddress;\n      ex.localPort = req.localPort;\n    }\n    self._destroy(ex);\n  }\n}\n\n\nfunction Server(options, connectionListener) {\n  if (!(this instanceof Server))\n    return new Server(options, connectionListener);\n\n  EventEmitter.call(this);\n\n  if (typeof options === 'function') {\n    connectionListener = options;\n    options = {};\n    this.on('connection', connectionListener);\n  } else if (options == null || typeof options === 'object') {\n    options = options || {};\n\n    if (typeof connectionListener === 'function') {\n      this.on('connection', connectionListener);\n    }\n  } else {\n    throw new TypeError('options must be an object');\n  }\n\n  this._connections = 0;\n\n  Object.defineProperty(this, 'connections', {\n    get: internalUtil.deprecate(() => {\n\n      if (this._usingSlaves) {\n        return null;\n      }\n      return this._connections;\n    }, 'Server.connections property is deprecated. ' +\n       'Use Server.getConnections method instead.'),\n    set: internalUtil.deprecate((val) => {\n      return (this._connections = val);\n    }, 'Server.connections property is deprecated.'),\n    configurable: true, enumerable: false\n  });\n\n  this._handle = null;\n  this._usingSlaves = false;\n  this._slaves = [];\n  this._unref = false;\n\n  this.allowHalfOpen = options.allowHalfOpen || false;\n  this.pauseOnConnect = !!options.pauseOnConnect;\n}\nutil.inherits(Server, EventEmitter);\nexports.Server = Server;\n\n\nfunction toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }\n\nfunction _listen(handle, backlog) {\n  // Use a backlog of 512 entries. We pass 511 to the listen() call because\n  // the kernel does: backlogsize = roundup_pow_of_two(backlogsize + 1);\n  // which will thus give us a backlog of 512 entries.\n  return handle.listen(backlog || 511);\n}\n\nfunction createServerHandle(address, port, addressType, fd) {\n  var err = 0;\n  // assign handle in listen, and clean up if bind or listen fails\n  var handle;\n\n  var isTCP = false;\n  if (typeof fd === 'number' && fd >= 0) {\n    try {\n      handle = createHandle(fd);\n    } catch (e) {\n      // Not a fd we can listen on.  This will trigger an error.\n      debug('listen invalid fd=' + fd + ': ' + e.message);\n      return uv.UV_EINVAL;\n    }\n    handle.open(fd);\n    handle.readable = true;\n    handle.writable = true;\n    assert(!address && !port);\n  } else if (port === -1 && addressType === -1) {\n    handle = new Pipe();\n    if (process.platform === 'win32') {\n      var instances = parseInt(process.env.NODE_PENDING_PIPE_INSTANCES);\n      if (!isNaN(instances)) {\n        handle.setPendingInstances(instances);\n      }\n    }\n  } else {\n    handle = new TCP();\n    isTCP = true;\n  }\n\n  if (address || port || isTCP) {\n    debug('bind to ' + (address || 'anycast'));\n    if (!address) {\n      // Try binding to ipv6 first\n      err = handle.bind6('::', port);\n      if (err) {\n        handle.close();\n        // Fallback to ipv4\n        return createServerHandle('0.0.0.0', port);\n      }\n    } else if (addressType === 6) {\n      err = handle.bind6(address, port);\n    } else {\n      err = handle.bind(address, port);\n    }\n  }\n\n  if (err) {\n    handle.close();\n    return err;\n  }\n\n  return handle;\n}\nexports._createServerHandle = createServerHandle;\n\n\nServer.prototype._listen2 = function(address, port, addressType, backlog, fd) {\n  debug('listen2', address, port, addressType, backlog, fd);\n\n  // If there is not yet a handle, we need to create one and bind.\n  // In the case of a server sent via IPC, we don't need to do this.\n  if (this._handle) {\n    debug('_listen2: have a handle already');\n  } else {\n    debug('_listen2: create a handle');\n\n    var rval = null;\n\n    if (!address && typeof fd !== 'number') {\n      rval = createServerHandle('::', port, 6, fd);\n\n      if (typeof rval === 'number') {\n        rval = null;\n        address = '0.0.0.0';\n        addressType = 4;\n      } else {\n        address = '::';\n        addressType = 6;\n      }\n    }\n\n    if (rval === null)\n      rval = createServerHandle(address, port, addressType, fd);\n\n    if (typeof rval === 'number') {\n      var error = exceptionWithHostPort(rval, 'listen', address, port);\n      process.nextTick(emitErrorNT, this, error);\n      return;\n    }\n    this._handle = rval;\n  }\n\n  this._handle.onconnection = onconnection;\n  this._handle.owner = this;\n\n  var err = _listen(this._handle, backlog);\n\n  if (err) {\n    var ex = exceptionWithHostPort(err, 'listen', address, port);\n    this._handle.close();\n    this._handle = null;\n    process.nextTick(emitErrorNT, this, ex);\n    return;\n  }\n\n  // generate connection key, this should be unique to the connection\n  this._connectionKey = addressType + ':' + address + ':' + port;\n\n  // unref the handle if the server was unref'ed prior to listening\n  if (this._unref)\n    this.unref();\n\n  process.nextTick(emitListeningNT, this);\n};\n\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\n\nfunction emitListeningNT(self) {\n  // ensure handle hasn't closed\n  if (self._handle)\n    self.emit('listening');\n}\n\n\nfunction listen(self, address, port, addressType, backlog, fd, exclusive) {\n  exclusive = !!exclusive;\n\n  if (!cluster) cluster = require('cluster');\n\n  if (cluster.isMaster || exclusive) {\n    self._listen2(address, port, addressType, backlog, fd);\n    return;\n  }\n\n  cluster._getServer(self, {\n    address: address,\n    port: port,\n    addressType: addressType,\n    fd: fd,\n    flags: 0\n  }, cb);\n\n  function cb(err, handle) {\n    // EADDRINUSE may not be reported until we call listen(). To complicate\n    // matters, a failed bind() followed by listen() will implicitly bind to\n    // a random port. Ergo, check that the socket is bound to the expected\n    // port before calling listen().\n    //\n    // FIXME(bnoordhuis) Doesn't work for pipe handles, they don't have a\n    // getsockname() method. Non-issue for now, the cluster module doesn't\n    // really support pipes anyway.\n    if (err === 0 && port > 0 && handle.getsockname) {\n      var out = {};\n      err = handle.getsockname(out);\n      if (err === 0 && port !== out.port)\n        err = uv.UV_EADDRINUSE;\n    }\n\n    if (err) {\n      var ex = exceptionWithHostPort(err, 'bind', address, port);\n      return self.emit('error', ex);\n    }\n\n    self._handle = handle;\n    self._listen2(address, port, addressType, backlog, fd);\n  }\n}\n\n\nServer.prototype.listen = function() {\n  var self = this;\n\n  var lastArg = arguments[arguments.length - 1];\n  if (typeof lastArg === 'function') {\n    self.once('listening', lastArg);\n  }\n\n  var port = toNumber(arguments[0]);\n\n  // The third optional argument is the backlog size.\n  // When the ip is omitted it can be the second argument.\n  var backlog = toNumber(arguments[1]) || toNumber(arguments[2]);\n\n  if (arguments.length === 0 || typeof arguments[0] === 'function') {\n    // Bind to a random port.\n    listen(self, null, 0, null, backlog);\n  } else if (arguments[0] !== null && typeof arguments[0] === 'object') {\n    var h = arguments[0];\n    h = h._handle || h.handle || h;\n\n    if (h instanceof TCP) {\n      self._handle = h;\n      listen(self, null, -1, -1, backlog);\n    } else if (typeof h.fd === 'number' && h.fd >= 0) {\n      listen(self, null, null, null, backlog, h.fd);\n    } else {\n      // The first argument is a configuration object\n      if (h.backlog)\n        backlog = h.backlog;\n\n      if (typeof h.port === 'number' || typeof h.port === 'string' ||\n          (typeof h.port === 'undefined' && 'port' in h)) {\n        // Undefined is interpreted as zero (random port) for consistency\n        // with net.connect().\n        assertPort(h.port);\n        if (h.host)\n          listenAfterLookup(h.port | 0, h.host, backlog, h.exclusive);\n        else\n          listen(self, null, h.port | 0, 4, backlog, undefined, h.exclusive);\n      } else if (h.path && isPipeName(h.path)) {\n        const pipeName = self._pipeName = h.path;\n        listen(self, pipeName, -1, -1, backlog, undefined, h.exclusive);\n      } else {\n        throw new Error('Invalid listen argument: ' + h);\n      }\n    }\n  } else if (isPipeName(arguments[0])) {\n    // UNIX socket or Windows pipe.\n    const pipeName = self._pipeName = arguments[0];\n    listen(self, pipeName, -1, -1, backlog);\n\n  } else if (arguments[1] === undefined ||\n             typeof arguments[1] === 'function' ||\n             typeof arguments[1] === 'number') {\n    // The first argument is the port, no IP given.\n    assertPort(port);\n    listen(self, null, port, 4, backlog);\n\n  } else {\n    // The first argument is the port, the second an IP.\n    assertPort(port);\n    listenAfterLookup(port, arguments[1], backlog);\n  }\n\n  function listenAfterLookup(port, address, backlog, exclusive) {\n    require('dns').lookup(address, function(err, ip, addressType) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        addressType = ip ? addressType : 4;\n        listen(self, ip, port, addressType, backlog, undefined, exclusive);\n      }\n    });\n  }\n\n  return self;\n};\n\nObject.defineProperty(Server.prototype, 'listening', {\n  get: function() {\n    return !!this._handle;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nServer.prototype.address = function() {\n  if (this._handle && this._handle.getsockname) {\n    var out = {};\n    this._handle.getsockname(out);\n    // TODO(bnoordhuis) Check err and throw?\n    return out;\n  } else if (this._pipeName) {\n    return this._pipeName;\n  } else {\n    return null;\n  }\n};\n\nfunction onconnection(err, clientHandle) {\n  var handle = this;\n  var self = handle.owner;\n\n  debug('onconnection');\n\n  if (err) {\n    self.emit('error', errnoException(err, 'accept'));\n    return;\n  }\n\n  if (self.maxConnections && self._connections >= self.maxConnections) {\n    clientHandle.close();\n    return;\n  }\n\n  var socket = new Socket({\n    handle: clientHandle,\n    allowHalfOpen: self.allowHalfOpen,\n    pauseOnCreate: self.pauseOnConnect\n  });\n  socket.readable = socket.writable = true;\n\n\n  self._connections++;\n  socket.server = self;\n  socket._server = self;\n\n  DTRACE_NET_SERVER_CONNECTION(socket);\n  ;\n  ;\n  self.emit('connection', socket);\n}\n\n\nServer.prototype.getConnections = function(cb) {\n  function end(err, connections) {\n    process.nextTick(cb, err, connections);\n  }\n\n  if (!this._usingSlaves) {\n    return end(null, this._connections);\n  }\n\n  // Poll slaves\n  var left = this._slaves.length;\n  var total = this._connections;\n\n  function oncount(err, count) {\n    if (err) {\n      left = -1;\n      return end(err);\n    }\n\n    total += count;\n    if (--left === 0) return end(null, total);\n  }\n\n  this._slaves.forEach(function(slave) {\n    slave.getConnections(oncount);\n  });\n};\n\n\nServer.prototype.close = function(cb) {\n  function onSlaveClose() {\n    if (--left !== 0) return;\n\n    self._connections = 0;\n    self._emitCloseIfDrained();\n  }\n\n  if (typeof cb === 'function') {\n    if (!this._handle) {\n      this.once('close', function() {\n        cb(new Error('Not running'));\n      });\n    } else {\n      this.once('close', cb);\n    }\n  }\n\n  if (this._handle) {\n    this._handle.close();\n    this._handle = null;\n  }\n\n  if (this._usingSlaves) {\n    var self = this;\n    var left = this._slaves.length;\n\n    // Increment connections to be sure that, even if all sockets will be closed\n    // during polling of slaves, `close` event will be emitted only once.\n    this._connections++;\n\n    // Poll slaves\n    this._slaves.forEach(function(slave) {\n      slave.close(onSlaveClose);\n    });\n  } else {\n    this._emitCloseIfDrained();\n  }\n\n  return this;\n};\n\nServer.prototype._emitCloseIfDrained = function() {\n  debug('SERVER _emitCloseIfDrained');\n\n  if (this._handle || this._connections) {\n    debug('SERVER handle? %j   connections? %d',\n          !!this._handle, this._connections);\n    return;\n  }\n\n  process.nextTick(emitCloseNT, this);\n};\n\n\nfunction emitCloseNT(self) {\n  debug('SERVER: emit close');\n  self.emit('close');\n}\n\n\nServer.prototype.listenFD = internalUtil.deprecate(function(fd, type) {\n  return this.listen({ fd: fd });\n}, 'Server.listenFD is deprecated. Use Server.listen({fd: <number>}) instead.');\n\nServer.prototype._setupSlave = function(socketList) {\n  this._usingSlaves = true;\n  this._slaves.push(socketList);\n};\n\nServer.prototype.ref = function() {\n  this._unref = false;\n\n  if (this._handle)\n    this._handle.ref();\n\n  return this;\n};\n\nServer.prototype.unref = function() {\n  this._unref = true;\n\n  if (this._handle)\n    this._handle.unref();\n\n  return this;\n};\n\n\nexports.isIP = cares.isIP;\n\n\nexports.isIPv4 = cares.isIPv4;\n\n\nexports.isIPv6 = cares.isIPv6;\n\n\nif (process.platform === 'win32') {\n  var simultaneousAccepts;\n\n  exports._setSimultaneousAccepts = function(handle) {\n    if (handle === undefined) {\n      return;\n    }\n\n    if (simultaneousAccepts === undefined) {\n      simultaneousAccepts = (process.env.NODE_MANY_ACCEPTS &&\n                             process.env.NODE_MANY_ACCEPTS !== '0');\n    }\n\n    if (handle._simultaneousAccepts !== simultaneousAccepts) {\n      handle.setSimultaneousAccepts(simultaneousAccepts);\n      handle._simultaneousAccepts = simultaneousAccepts;\n    }\n  };\n} else {\n  exports._setSimultaneousAccepts = function(handle) {};\n}\n\n});"}
{"type":"var","id":120,"name":"chunk","val":"time:     20:20:17\n"}
{"type":"var","id":121,"name":"encoding","val":"[undefined]"}
{"type":"var","id":122,"name":"cb","val":"[undefined]"}
{"type":"scope","id":21,"scope":{"type":"local","name":"Socket.write","vars":[120,121,122,74]}}
{"type":"var","id":123,"name":"EventEmitter","val":"[Function]"}
{"type":"var","id":124,"name":"stream","val":"[Function]"}
{"type":"var","id":125,"name":"timers","val":"Object"}
{"type":"var","id":126,"name":"internalUtil","val":"Object"}
{"type":"var","id":127,"name":"Buffer","val":"[Function]"}
{"type":"var","id":128,"name":"TTYWrap","val":"Object"}
{"type":"var","id":129,"name":"TCP","val":"[Function]"}
{"type":"var","id":130,"name":"Pipe","val":"[Function]"}
{"type":"var","id":131,"name":"TCPConnectWrap","val":"[Function]"}
{"type":"var","id":132,"name":"PipeConnectWrap","val":"[Function]"}
{"type":"var","id":133,"name":"ShutdownWrap","val":"[Function]"}
{"type":"var","id":134,"name":"WriteWrap","val":"[Function]"}
{"type":"var","id":135,"name":"cluster","val":"[undefined]"}
{"type":"var","id":136,"name":"errnoException","val":"[Function]"}
{"type":"var","id":137,"name":"exceptionWithHostPort","val":"[Function]"}
{"type":"var","id":138,"name":"isLegalPort","val":"[Function]"}
{"type":"var","id":139,"name":"assertPort","val":"[Function]"}
{"type":"var","id":140,"name":"noop","val":"[Function]"}
{"type":"var","id":141,"name":"createHandle","val":"[Function]"}
{"type":"var","id":142,"name":"isPipeName","val":"[Function]"}
{"type":"var","id":143,"name":"normalizeConnectArgs","val":"[Function]"}
{"type":"var","id":144,"name":"initSocketHandle","val":"[Function]"}
{"type":"var","id":145,"name":"BYTES_READ","val":"Symbol(bytesRead)"}
{"type":"var","id":146,"name":"Socket","val":"[Function]"}
{"type":"var","id":147,"name":"onSocketFinish","val":"[Function]"}
{"type":"var","id":148,"name":"afterShutdown","val":"[Function]"}
{"type":"var","id":149,"name":"onSocketEnd","val":"[Function]"}
{"type":"var","id":150,"name":"writeAfterFIN","val":"[Function]"}
{"type":"var","id":151,"name":"maybeDestroy","val":"[Function]"}
{"type":"var","id":152,"name":"onread","val":"[Function]"}
{"type":"var","id":153,"name":"createWriteReq","val":"[Function]"}
{"type":"var","id":154,"name":"afterWrite","val":"[Function]"}
{"type":"var","id":155,"name":"connect","val":"[Function]"}
{"type":"var","id":156,"name":"lookupAndConnect","val":"[Function]"}
{"type":"var","id":157,"name":"connectErrorNT","val":"[Function]"}
{"type":"var","id":158,"name":"afterConnect","val":"[Function]"}
{"type":"var","id":159,"name":"Server","val":"[Function]"}
{"type":"var","id":160,"name":"toNumber","val":"[Function]"}
{"type":"var","id":161,"name":"_listen","val":"[Function]"}
{"type":"var","id":162,"name":"createServerHandle","val":"[Function]"}
{"type":"var","id":163,"name":"emitErrorNT","val":"[Function]"}
{"type":"var","id":164,"name":"emitListeningNT","val":"[Function]"}
{"type":"var","id":165,"name":"listen","val":"[Function]"}
{"type":"var","id":166,"name":"onconnection","val":"[Function]"}
{"type":"var","id":167,"name":"emitCloseNT","val":"[Function]"}
{"type":"var","id":168,"name":"simultaneousAccepts","val":"[undefined]"}
{"type":"scope","id":22,"scope":{"type":"closure","vars":[70,81,123,124,125,126,8,82,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,9,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]}}
{"type":"frame","id":29,"frame":{"fn":"Socket.write","script":"63","line":653,"col":2,"scopes":[21,22]}}
{"type":"frame","id":30,"frame":{"fn":"Console.log","script":"61","line":42,"col":15,"scopes":[16,17]}}
{"date":1485030017709,"type":"break","frames":[29,30,23,1,2,3]}
{"type":"frame","id":31,"frame":{"fn":"Socket.write","script":"63","line":657,"col":2,"scopes":[21,22]}}
{"date":1485030017728,"type":"break","frames":[31,30,23,1,2,3]}
{"type":"script","id":"56","url":"_stream_writable.js","endLine":558,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { // A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\nWritable.WritableState = WritableState;\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst Stream = require('stream');\nconst Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\nObject.defineProperty(WritableState.prototype, 'buffer', {\n  get: internalUtil.deprecate(function() {\n    return this.getBuffer();\n  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +\n     'instead.')\n});\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance) {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function(object) {\n      if (realHasInstance.call(this, object))\n        return true;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!(realHasInstance.call(Writable, this)) &&\n      !(this instanceof Stream.Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function')\n      this._write = options.write;\n\n    if (typeof options.writev === 'function')\n      this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!(chunk instanceof Buffer) &&\n      typeof chunk !== 'string' &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    process.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk instanceof Buffer)\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function')\n    cb = nop;\n\n  if (state.ended)\n    writeAfterEnd(this, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.bufferedRequest)\n      clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string')\n    encoding = encoding.toLowerCase();\n  if (!Buffer.isEncoding(encoding))\n    throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (chunk instanceof Buffer)\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync)\n    process.nextTick(cb, er);\n  else\n    cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null)\n      state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined)\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(state) {\n  return (state.ending &&\n          state.length === 0 &&\n          state.bufferedRequest === null &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  this.next = null;\n  this.entry = null;\n\n  this.finish = (err) => {\n    var entry = this.entry;\n    this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = this;\n    } else {\n      state.corkedRequestsFree = this;\n    }\n  };\n}\n\n});"}
{"type":"var","id":169,"name":"state","val":"[undefined]"}
{"type":"var","id":170,"name":"ret","val":"[undefined]"}
{"type":"scope","id":23,"scope":{"type":"local","name":"Writable.write","vars":[120,121,122,169,170]}}
{"type":"var","id":171,"name":"Stream","val":"[Function]"}
{"type":"var","id":172,"name":"nop","val":"[Function]"}
{"type":"var","id":173,"name":"WriteReq","val":"[Function]"}
{"type":"var","id":174,"name":"WritableState","val":"[Function]"}
{"type":"var","id":175,"name":"realHasInstance","val":"[Function]"}
{"type":"var","id":176,"name":"Writable","val":"[Function]"}
{"type":"var","id":177,"name":"writeAfterEnd","val":"[Function]"}
{"type":"var","id":178,"name":"validChunk","val":"[Function]"}
{"type":"var","id":179,"name":"decodeChunk","val":"[Function]"}
{"type":"var","id":180,"name":"writeOrBuffer","val":"[Function]"}
{"type":"var","id":181,"name":"doWrite","val":"[Function]"}
{"type":"var","id":182,"name":"onwriteError","val":"[Function]"}
{"type":"var","id":183,"name":"onwriteStateUpdate","val":"[Function]"}
{"type":"var","id":184,"name":"onwrite","val":"[Function]"}
{"type":"var","id":185,"name":"onwriteDrain","val":"[Function]"}
{"type":"var","id":186,"name":"clearBuffer","val":"[Function]"}
{"type":"var","id":187,"name":"needFinish","val":"[Function]"}
{"type":"var","id":188,"name":"prefinish","val":"[Function]"}
{"type":"var","id":189,"name":"finishMaybe","val":"[Function]"}
{"type":"var","id":190,"name":"endWritable","val":"[Function]"}
{"type":"var","id":191,"name":"CorkedRequest","val":"[Function]"}
{"type":"scope","id":24,"scope":{"type":"closure","vars":[171,127,172,173,174,175,176,177,178,179,180,181,182,183,184,154,185,186,187,188,189,190,191]}}
{"type":"frame","id":32,"frame":{"fn":"Writable.write","script":"56","line":226,"col":18,"scopes":[23,24]}}
{"type":"frame","id":33,"frame":{"fn":"Socket.write","script":"63","line":657,"col":39,"scopes":[21,22]}}
{"date":1485030017743,"type":"break","frames":[32,33,30,23,1,2,3]}
{"type":"var","id":192,"name":"state","val":"WritableState"}
{"type":"scope","id":25,"scope":{"type":"local","name":"Writable.write","vars":[120,121,122,192,170]}}
{"type":"frame","id":34,"frame":{"fn":"Writable.write","script":"56","line":227,"col":12,"scopes":[25,24]}}
{"date":1485030017759,"type":"break","frames":[34,33,30,23,1,2,3]}
{"type":"var","id":193,"name":"ret","val":false}
{"type":"scope","id":26,"scope":{"type":"local","name":"Writable.write","vars":[120,121,122,192,193]}}
{"type":"frame","id":35,"frame":{"fn":"Writable.write","script":"56","line":229,"col":2,"scopes":[26,24]}}
{"date":1485030017774,"type":"break","frames":[35,33,30,23,1,2,3]}
{"type":"frame","id":36,"frame":{"fn":"Writable.write","script":"56","line":234,"col":2,"scopes":[26,24]}}
{"date":1485030017789,"type":"break","frames":[36,33,30,23,1,2,3]}
{"type":"frame","id":37,"frame":{"fn":"Writable.write","script":"56","line":236,"col":7,"scopes":[26,24]}}
{"date":1485030017804,"type":"break","frames":[37,33,30,23,1,2,3]}
{"type":"frame","id":38,"frame":{"fn":"Writable.write","script":"56","line":237,"col":4,"scopes":[26,24]}}
{"date":1485030017818,"type":"break","frames":[38,33,30,23,1,2,3]}
{"type":"var","id":194,"name":"encoding","val":"utf8"}
{"type":"scope","id":27,"scope":{"type":"local","name":"Writable.write","vars":[120,194,122,192,193]}}
{"type":"frame","id":39,"frame":{"fn":"Writable.write","script":"56","line":239,"col":2,"scopes":[27,24]}}
{"date":1485030017833,"type":"break","frames":[39,33,30,23,1,2,3]}
{"type":"frame","id":40,"frame":{"fn":"Writable.write","script":"56","line":240,"col":4,"scopes":[27,24]}}
{"date":1485030017848,"type":"break","frames":[40,33,30,23,1,2,3]}
{"type":"var","id":195,"name":"cb","val":"[Function]"}
{"type":"scope","id":28,"scope":{"type":"local","name":"Writable.write","vars":[120,194,195,192,193]}}
{"type":"frame","id":41,"frame":{"fn":"Writable.write","script":"56","line":242,"col":2,"scopes":[28,24]}}
{"date":1485030017862,"type":"break","frames":[41,33,30,23,1,2,3]}
{"type":"frame","id":42,"frame":{"fn":"Writable.write","script":"56","line":244,"col":7,"scopes":[28,24]}}
{"date":1485030017877,"type":"break","frames":[42,33,30,23,1,2,3]}
{"type":"var","id":196,"name":"stream","val":"WriteStream"}
{"type":"var","id":197,"name":"valid","val":"[undefined]"}
{"type":"var","id":198,"name":"er","val":"[undefined]"}
{"type":"scope","id":29,"scope":{"type":"local","name":"validChunk","vars":[196,192,120,195,197,198]}}
{"type":"frame","id":43,"frame":{"fn":"validChunk","script":"56","line":204,"col":14,"scopes":[29,24]}}
{"type":"frame","id":44,"frame":{"fn":"Writable.write","script":"56","line":244,"col":11,"scopes":[28,24]}}
{"date":1485030017895,"type":"break","frames":[43,44,33,30,23,1,2,3]}
{"type":"var","id":199,"name":"valid","val":true}
{"type":"scope","id":30,"scope":{"type":"local","name":"validChunk","vars":[196,192,120,195,199,198]}}
{"type":"frame","id":45,"frame":{"fn":"validChunk","script":"56","line":205,"col":11,"scopes":[30,24]}}
{"date":1485030017911,"type":"break","frames":[45,44,33,30,23,1,2,3]}
{"type":"var","id":200,"name":"er","val":false}
{"type":"scope","id":31,"scope":{"type":"local","name":"validChunk","vars":[196,192,120,195,199,200]}}
{"type":"frame","id":46,"frame":{"fn":"validChunk","script":"56","line":209,"col":2,"scopes":[31,24]}}
{"date":1485030017927,"type":"break","frames":[46,44,33,30,23,1,2,3]}
{"type":"frame","id":47,"frame":{"fn":"validChunk","script":"56","line":211,"col":9,"scopes":[31,24]}}
{"date":1485030017943,"type":"break","frames":[47,44,33,30,23,1,2,3]}
{"type":"frame","id":48,"frame":{"fn":"validChunk","script":"56","line":217,"col":2,"scopes":[31,24]}}
{"date":1485030017959,"type":"break","frames":[48,44,33,30,23,1,2,3]}
{"type":"frame","id":49,"frame":{"fn":"validChunk","script":"56","line":222,"col":2,"scopes":[31,24]}}
{"date":1485030017974,"type":"break","frames":[49,44,33,30,23,1,2,3]}
{"type":"frame","id":50,"frame":{"fn":"validChunk","script":"56","line":223,"col":0,"scopes":[31,24]}}
{"date":1485030017990,"type":"break","frames":[50,44,33,30,23,1,2,3]}
{"type":"frame","id":51,"frame":{"fn":"Writable.write","script":"56","line":245,"col":4,"scopes":[28,24]}}
{"date":1485030018004,"type":"break","frames":[51,33,30,23,1,2,3]}
{"type":"frame","id":52,"frame":{"fn":"Writable.write","script":"56","line":246,"col":4,"scopes":[28,24]}}
{"date":1485030018019,"type":"break","frames":[52,33,30,23,1,2,3]}
{"type":"var","id":201,"name":"len","val":"[undefined]"}
{"type":"var","id":202,"name":"last","val":"[undefined]"}
{"type":"scope","id":32,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,120,194,195,201,170,202]}}
{"type":"frame","id":53,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":2,"scopes":[32,24]}}
{"type":"frame","id":54,"frame":{"fn":"Writable.write","script":"56","line":246,"col":10,"scopes":[28,24]}}
{"date":1485030018037,"type":"break","frames":[53,54,33,30,23,1,2,3]}
{"type":"scope","id":33,"scope":{"type":"local","name":"decodeChunk","vars":[192,120,194]}}
{"type":"frame","id":55,"frame":{"fn":"decodeChunk","script":"56","line":284,"col":2,"scopes":[33,24]}}
{"type":"frame","id":56,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":10,"scopes":[32,24]}}
{"date":1485030018054,"type":"break","frames":[55,56,54,33,30,23,1,2,3]}
{"type":"frame","id":57,"frame":{"fn":"decodeChunk","script":"56","line":289,"col":2,"scopes":[33,24]}}
{"date":1485030018073,"type":"break","frames":[57,56,54,33,30,23,1,2,3]}
{"type":"frame","id":58,"frame":{"fn":"decodeChunk","script":"56","line":290,"col":0,"scopes":[33,24]}}
{"date":1485030018093,"type":"break","frames":[58,56,54,33,30,23,1,2,3]}
{"type":"frame","id":59,"frame":{"fn":"writeOrBuffer","script":"56","line":298,"col":2,"scopes":[32,24]}}
{"date":1485030018110,"type":"break","frames":[59,54,33,30,23,1,2,3]}
{"type":"frame","id":60,"frame":{"fn":"writeOrBuffer","script":"56","line":300,"col":12,"scopes":[32,24]}}
{"date":1485030018126,"type":"break","frames":[60,54,33,30,23,1,2,3]}
{"type":"var","id":203,"name":"len","val":19}
{"type":"scope","id":34,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,120,194,195,203,170,202]}}
{"type":"frame","id":61,"frame":{"fn":"writeOrBuffer","script":"56","line":302,"col":2,"scopes":[34,24]}}
{"date":1485030018142,"type":"break","frames":[61,54,33,30,23,1,2,3]}
{"type":"frame","id":62,"frame":{"fn":"writeOrBuffer","script":"56","line":304,"col":25,"scopes":[34,24]}}
{"date":1485030018158,"type":"break","frames":[62,54,33,30,23,1,2,3]}
{"type":"var","id":204,"name":"ret","val":true}
{"type":"scope","id":35,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,120,194,195,203,204,202]}}
{"type":"frame","id":63,"frame":{"fn":"writeOrBuffer","script":"56","line":306,"col":2,"scopes":[35,24]}}
{"date":1485030018175,"type":"break","frames":[63,54,33,30,23,1,2,3]}
{"type":"frame","id":64,"frame":{"fn":"writeOrBuffer","script":"56","line":309,"col":2,"scopes":[35,24]}}
{"date":1485030018191,"type":"break","frames":[64,54,33,30,23,1,2,3]}
{"type":"frame","id":65,"frame":{"fn":"writeOrBuffer","script":"56","line":319,"col":4,"scopes":[35,24]}}
{"date":1485030018207,"type":"break","frames":[65,54,33,30,23,1,2,3]}
{"type":"var","id":205,"name":"writev","val":false}
{"type":"scope","id":36,"scope":{"type":"local","name":"doWrite","vars":[196,192,205,203,120,194,195]}}
{"type":"frame","id":66,"frame":{"fn":"doWrite","script":"56","line":326,"col":2,"scopes":[36,24]}}
{"date":1485030018225,"type":"break","frames":[66,65,54,33,30,23,1,2,3]}
{"type":"frame","id":67,"frame":{"fn":"doWrite","script":"56","line":327,"col":2,"scopes":[36,24]}}
{"date":1485030018242,"type":"break","frames":[67,65,54,33,30,23,1,2,3]}
{"type":"frame","id":68,"frame":{"fn":"doWrite","script":"56","line":328,"col":2,"scopes":[36,24]}}
{"date":1485030018260,"type":"break","frames":[68,65,54,33,30,23,1,2,3]}
{"type":"frame","id":69,"frame":{"fn":"doWrite","script":"56","line":329,"col":2,"scopes":[36,24]}}
{"date":1485030018280,"type":"break","frames":[69,65,54,33,30,23,1,2,3]}
{"type":"frame","id":70,"frame":{"fn":"doWrite","script":"56","line":330,"col":2,"scopes":[36,24]}}
{"date":1485030018298,"type":"break","frames":[70,65,54,33,30,23,1,2,3]}
{"type":"frame","id":71,"frame":{"fn":"doWrite","script":"56","line":333,"col":4,"scopes":[36,24]}}
{"date":1485030018315,"type":"break","frames":[71,65,54,33,30,23,1,2,3]}
{"type":"var","id":206,"name":"data","val":"time:     20:20:17\n"}
{"type":"scope","id":37,"scope":{"type":"local","name":"Socket._write","vars":[206,194,195]}}
{"type":"frame","id":72,"frame":{"fn":"Socket._write","script":"63","line":730,"col":2,"scopes":[37,22]}}
{"type":"frame","id":73,"frame":{"fn":"doWrite","script":"56","line":333,"col":11,"scopes":[36,24]}}
{"date":1485030018336,"type":"break","frames":[72,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":207,"name":"req","val":"[undefined]"}
{"type":"var","id":208,"name":"err","val":"[undefined]"}
{"type":"var","id":209,"name":"chunks","val":"[undefined]"}
{"type":"var","id":210,"name":"entry","val":"[undefined]"}
{"type":"var","id":211,"name":"enc","val":"[undefined]"}
{"type":"scope","id":38,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[207,208,209,80,210,211,195,194,206,205]}}
{"type":"frame","id":74,"frame":{"fn":"Socket._writeGeneric","script":"63","line":665,"col":2,"scopes":[38,22]}}
{"type":"frame","id":75,"frame":{"fn":"Socket._write","script":"63","line":730,"col":7,"scopes":[37,22]}}
{"date":1485030018362,"type":"break","frames":[74,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":76,"frame":{"fn":"Socket._writeGeneric","script":"63","line":673,"col":2,"scopes":[38,22]}}
{"date":1485030018386,"type":"break","frames":[76,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":77,"frame":{"fn":"Socket._writeGeneric","script":"63","line":674,"col":2,"scopes":[38,22]}}
{"date":1485030018411,"type":"break","frames":[77,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":78,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":2,"scopes":[38,22]}}
{"date":1485030018435,"type":"break","frames":[78,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":212,"name":"s","val":"[undefined]"}
{"type":"scope","id":39,"scope":{"type":"local","name":"_unrefTimer","vars":[212]}}
{"type":"frame","id":79,"frame":{"fn":"_unrefTimer","script":"63","line":198,"col":15,"scopes":[39,22]}}
{"type":"frame","id":80,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":7,"scopes":[38,22]}}
{"date":1485030018464,"type":"break","frames":[79,80,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":213,"name":"s","val":"WriteStream"}
{"type":"scope","id":40,"scope":{"type":"local","name":"_unrefTimer","vars":[213]}}
{"type":"frame","id":81,"frame":{"fn":"_unrefTimer","script":"63","line":199,"col":4,"scopes":[40,22]}}
{"date":1485030018493,"type":"break","frames":[81,80,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":214,"name":"s","val":"[Object]"}
{"type":"scope","id":41,"scope":{"type":"local","name":"_unrefTimer","vars":[214]}}
{"type":"frame","id":82,"frame":{"fn":"_unrefTimer","script":"63","line":200,"col":0,"scopes":[41,22]}}
{"date":1485030018519,"type":"break","frames":[82,80,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":83,"frame":{"fn":"Socket._writeGeneric","script":"63","line":678,"col":2,"scopes":[38,22]}}
{"date":1485030018543,"type":"break","frames":[83,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":84,"frame":{"fn":"Socket._writeGeneric","script":"63","line":683,"col":12,"scopes":[38,22]}}
{"date":1485030018567,"type":"break","frames":[84,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":215,"name":"req","val":"WriteWrap"}
{"type":"scope","id":42,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,211,195,194,206,205]}}
{"type":"frame","id":85,"frame":{"fn":"Socket._writeGeneric","script":"63","line":684,"col":2,"scopes":[42,22]}}
{"date":1485030018590,"type":"break","frames":[85,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":86,"frame":{"fn":"Socket._writeGeneric","script":"63","line":685,"col":2,"scopes":[42,22]}}
{"date":1485030018613,"type":"break","frames":[86,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":87,"frame":{"fn":"Socket._writeGeneric","script":"63","line":686,"col":2,"scopes":[42,22]}}
{"date":1485030018638,"type":"break","frames":[87,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":88,"frame":{"fn":"Socket._writeGeneric","script":"63","line":689,"col":2,"scopes":[42,22]}}
{"date":1485030018662,"type":"break","frames":[88,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":89,"frame":{"fn":"Socket._writeGeneric","script":"63","line":702,"col":4,"scopes":[42,22]}}
{"date":1485030018685,"type":"break","frames":[89,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":90,"frame":{"fn":"Socket._writeGeneric","script":"63","line":705,"col":6,"scopes":[42,22]}}
{"date":1485030018708,"type":"break","frames":[90,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":216,"name":"enc","val":"utf8"}
{"type":"scope","id":43,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,216,195,194,206,205]}}
{"type":"frame","id":91,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":4,"scopes":[43,22]}}
{"date":1485030018736,"type":"break","frames":[91,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":217,"name":"handle","val":"TTY"}
{"type":"scope","id":44,"scope":{"type":"local","name":"createWriteReq","vars":[215,217,206,194]}}
{"type":"frame","id":92,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":10,"scopes":[44,22]}}
{"type":"frame","id":93,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":10,"scopes":[43,22]}}
{"date":1485030018762,"type":"break","frames":[92,93,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":94,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":2,"scopes":[44,22]}}
{"date":1485030018789,"type":"break","frames":[94,93,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":95,"frame":{"fn":"createWriteReq","script":"63","line":744,"col":6,"scopes":[44,22]}}
{"date":1485030018819,"type":"break","frames":[95,93,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":96,"frame":{"fn":"createWriteReq","script":"63","line":758,"col":0,"scopes":[44,22]}}
{"date":1485030018849,"type":"break","frames":[96,93,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":218,"name":"err","val":0}
{"type":"scope","id":45,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,218,209,80,210,216,195,194,206,205]}}
{"type":"frame","id":97,"frame":{"fn":"Socket._writeGeneric","script":"63","line":710,"col":2,"scopes":[45,22]}}
{"date":1485030018873,"type":"break","frames":[97,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":98,"frame":{"fn":"Socket._writeGeneric","script":"63","line":713,"col":2,"scopes":[45,22]}}
{"date":1485030018899,"type":"break","frames":[98,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":99,"frame":{"fn":"Socket._writeGeneric","script":"63","line":717,"col":2,"scopes":[45,22]}}
{"date":1485030018925,"type":"break","frames":[99,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":100,"frame":{"fn":"Socket._writeGeneric","script":"63","line":720,"col":4,"scopes":[45,22]}}
{"date":1485030018949,"type":"break","frames":[100,75,73,65,54,33,30,23,1,2,3]}
{"type":"scope","id":46,"scope":{"type":"local","name":"WritableState.onwrite","vars":[198]}}
{"type":"scope","id":47,"scope":{"type":"closure","name":"WritableState","vars":[196]}}
{"type":"frame","id":101,"frame":{"fn":"WritableState.onwrite","script":"56","line":89,"col":4,"scopes":[46,47,24]}}
{"date":1485030018977,"type":"break","frames":[101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":219,"name":"sync","val":"[undefined]"}
{"type":"var","id":220,"name":"finished","val":"[undefined]"}
{"type":"scope","id":48,"scope":{"type":"local","name":"onwrite","vars":[196,198,169,219,122,220]}}
{"type":"frame","id":102,"frame":{"fn":"onwrite","script":"56","line":356,"col":20,"scopes":[48,24]}}
{"date":1485030019007,"type":"break","frames":[102,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"scope","id":49,"scope":{"type":"local","name":"onwrite","vars":[196,198,192,219,122,220]}}
{"type":"frame","id":103,"frame":{"fn":"onwrite","script":"56","line":357,"col":18,"scopes":[49,24]}}
{"date":1485030019037,"type":"break","frames":[103,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":221,"name":"sync","val":true}
{"type":"scope","id":50,"scope":{"type":"local","name":"onwrite","vars":[196,198,192,221,122,220]}}
{"type":"frame","id":104,"frame":{"fn":"onwrite","script":"56","line":358,"col":16,"scopes":[50,24]}}
{"date":1485030019066,"type":"break","frames":[104,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"scope","id":51,"scope":{"type":"local","name":"onwrite","vars":[196,198,192,221,195,220]}}
{"type":"frame","id":105,"frame":{"fn":"onwrite","script":"56","line":360,"col":2,"scopes":[51,24]}}
{"date":1485030019097,"type":"break","frames":[105,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"scope","id":52,"scope":{"type":"local","name":"onwriteStateUpdate","vars":[192]}}
{"type":"frame","id":106,"frame":{"fn":"onwriteStateUpdate","script":"56","line":349,"col":2,"scopes":[52,24]}}
{"date":1485030019127,"type":"break","frames":[106,105,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":107,"frame":{"fn":"onwriteStateUpdate","script":"56","line":350,"col":2,"scopes":[52,24]}}
{"date":1485030019157,"type":"break","frames":[107,105,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":108,"frame":{"fn":"onwriteStateUpdate","script":"56","line":351,"col":2,"scopes":[52,24]}}
{"date":1485030019187,"type":"break","frames":[108,105,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":109,"frame":{"fn":"onwriteStateUpdate","script":"56","line":352,"col":2,"scopes":[52,24]}}
{"date":1485030019220,"type":"break","frames":[109,105,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":110,"frame":{"fn":"onwriteStateUpdate","script":"56","line":353,"col":0,"scopes":[52,24]}}
{"date":1485030019251,"type":"break","frames":[110,105,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":111,"frame":{"fn":"onwrite","script":"56","line":362,"col":2,"scopes":[51,24]}}
{"date":1485030019278,"type":"break","frames":[111,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":112,"frame":{"fn":"onwrite","script":"56","line":366,"col":19,"scopes":[51,24]}}
{"date":1485030019306,"type":"break","frames":[112,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"scope","id":53,"scope":{"type":"local","name":"needFinish","vars":[192]}}
{"type":"frame","id":113,"frame":{"fn":"needFinish","script":"56","line":494,"col":2,"scopes":[53,24]}}
{"date":1485030019335,"type":"break","frames":[113,112,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":114,"frame":{"fn":"needFinish","script":"56","line":499,"col":0,"scopes":[53,24]}}
{"date":1485030019364,"type":"break","frames":[114,112,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"var","id":222,"name":"finished","val":false}
{"type":"scope","id":54,"scope":{"type":"local","name":"onwrite","vars":[196,198,192,221,195,222]}}
{"type":"frame","id":115,"frame":{"fn":"onwrite","script":"56","line":368,"col":4,"scopes":[54,24]}}
{"date":1485030019392,"type":"break","frames":[115,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":116,"frame":{"fn":"onwrite","script":"56","line":375,"col":4,"scopes":[54,24]}}
{"date":1485030019422,"type":"break","frames":[116,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":117,"frame":{"fn":"onwrite","script":"56","line":376,"col":6,"scopes":[54,24]}}
{"date":1485030019451,"type":"break","frames":[117,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":118,"frame":{"fn":"onwrite","script":"56","line":381,"col":0,"scopes":[54,24]}}
{"date":1485030019482,"type":"break","frames":[118,101,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":119,"frame":{"fn":"WritableState.onwrite","script":"56","line":90,"col":2,"scopes":[46,47,24]}}
{"date":1485030019506,"type":"break","frames":[119,100,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":120,"frame":{"fn":"Socket._writeGeneric","script":"63","line":721,"col":0,"scopes":[45,22]}}
{"date":1485030019530,"type":"break","frames":[120,75,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":121,"frame":{"fn":"Socket._write","script":"63","line":731,"col":0,"scopes":[37,22]}}
{"date":1485030019551,"type":"break","frames":[121,73,65,54,33,30,23,1,2,3]}
{"type":"frame","id":122,"frame":{"fn":"doWrite","script":"56","line":334,"col":2,"scopes":[36,24]}}
{"date":1485030019568,"type":"break","frames":[122,65,54,33,30,23,1,2,3]}
{"type":"frame","id":123,"frame":{"fn":"doWrite","script":"56","line":335,"col":0,"scopes":[36,24]}}
{"date":1485030019586,"type":"break","frames":[123,65,54,33,30,23,1,2,3]}
{"type":"frame","id":124,"frame":{"fn":"writeOrBuffer","script":"56","line":322,"col":2,"scopes":[35,24]}}
{"date":1485030019602,"type":"break","frames":[124,54,33,30,23,1,2,3]}
{"type":"frame","id":125,"frame":{"fn":"writeOrBuffer","script":"56","line":323,"col":0,"scopes":[35,24]}}
{"date":1485030019620,"type":"break","frames":[125,54,33,30,23,1,2,3]}
{"type":"scope","id":55,"scope":{"type":"local","name":"Writable.write","vars":[120,194,195,192,204]}}
{"type":"frame","id":126,"frame":{"fn":"Writable.write","script":"56","line":249,"col":2,"scopes":[55,24]}}
{"date":1485030019634,"type":"break","frames":[126,33,30,23,1,2,3]}
{"type":"frame","id":127,"frame":{"fn":"Writable.write","script":"56","line":250,"col":0,"scopes":[55,24]}}
{"date":1485030019649,"type":"break","frames":[127,33,30,23,1,2,3]}
{"type":"frame","id":128,"frame":{"fn":"Socket.write","script":"63","line":658,"col":0,"scopes":[21,22]}}
{"date":1485030019661,"type":"break","frames":[128,30,23,1,2,3]}
{"type":"frame","id":129,"frame":{"fn":"Console.log","script":"61","line":43,"col":0,"scopes":[16,17]}}
{"date":1485030019670,"type":"break","frames":[129,23,1,2,3]}
{"type":"frame","id":130,"frame":{"fn":"onInterval","script":"60","line":10,"col":0,"scopes":[12,1]}}
{"date":1485030019679,"type":"break","frames":[130,1,2,3]}
{"type":"script","id":"45","url":"internal/process/next_tick.js","endLine":158,"endColumn":3,"source":"(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nexports.setup = setupNextTick;\n\nfunction setupNextTick() {\n  const promises = require('internal/process/promises');\n  const emitPendingUnhandledRejections = promises.setup(scheduleMicrotasks);\n  var nextTickQueue = [];\n  var microtasksScheduled = false;\n\n  // Used to run V8's micro task queue.\n  var _runMicrotasks = {};\n\n  // *Must* match Environment::TickInfo::Fields in src/env.h.\n  var kIndex = 0;\n  var kLength = 1;\n\n  process.nextTick = nextTick;\n  // Needs to be accessible from beyond this scope.\n  process._tickCallback = _tickCallback;\n  process._tickDomainCallback = _tickDomainCallback;\n\n  // This tickInfo thing is used so that the C++ code in src/node.cc\n  // can have easy access to our nextTick state, and avoid unnecessary\n  // calls into JS land.\n  const tickInfo = process._setupNextTick(_tickCallback, _runMicrotasks);\n\n  _runMicrotasks = _runMicrotasks.runMicrotasks;\n\n  function tickDone() {\n    if (tickInfo[kLength] !== 0) {\n      if (tickInfo[kLength] <= tickInfo[kIndex]) {\n        nextTickQueue = [];\n        tickInfo[kLength] = 0;\n      } else {\n        nextTickQueue.splice(0, tickInfo[kIndex]);\n        tickInfo[kLength] = nextTickQueue.length;\n      }\n    }\n    tickInfo[kIndex] = 0;\n  }\n\n  function scheduleMicrotasks() {\n    if (microtasksScheduled)\n      return;\n\n    nextTickQueue.push({\n      callback: runMicrotasksCallback,\n      domain: null\n    });\n\n    tickInfo[kLength]++;\n    microtasksScheduled = true;\n  }\n\n  function runMicrotasksCallback() {\n    microtasksScheduled = false;\n    _runMicrotasks();\n\n    if (tickInfo[kIndex] < tickInfo[kLength] ||\n        emitPendingUnhandledRejections())\n      scheduleMicrotasks();\n  }\n\n  function _combinedTickCallback(args, callback) {\n    if (args === undefined) {\n      callback();\n    } else {\n      switch (args.length) {\n        case 1:\n          callback(args[0]);\n          break;\n        case 2:\n          callback(args[0], args[1]);\n          break;\n        case 3:\n          callback(args[0], args[1], args[2]);\n          break;\n        default:\n          callback.apply(null, args);\n      }\n    }\n  }\n\n  // Run callbacks that have no domain.\n  // Using domains will cause this to be overridden.\n  function _tickCallback() {\n    var callback, args, tock;\n\n    do {\n      while (tickInfo[kIndex] < tickInfo[kLength]) {\n        tock = nextTickQueue[tickInfo[kIndex]++];\n        callback = tock.callback;\n        args = tock.args;\n        // Using separate callback execution functions allows direct\n        // callback invocation with small numbers of arguments to avoid the\n        // performance hit associated with using `fn.apply()`\n        _combinedTickCallback(args, callback);\n        if (1e4 < tickInfo[kIndex])\n          tickDone();\n      }\n      tickDone();\n      _runMicrotasks();\n      emitPendingUnhandledRejections();\n    } while (tickInfo[kLength] !== 0);\n  }\n\n  function _tickDomainCallback() {\n    var callback, domain, args, tock;\n\n    do {\n      while (tickInfo[kIndex] < tickInfo[kLength]) {\n        tock = nextTickQueue[tickInfo[kIndex]++];\n        callback = tock.callback;\n        domain = tock.domain;\n        args = tock.args;\n        if (domain)\n          domain.enter();\n        // Using separate callback execution functions allows direct\n        // callback invocation with small numbers of arguments to avoid the\n        // performance hit associated with using `fn.apply()`\n        _combinedTickCallback(args, callback);\n        if (1e4 < tickInfo[kIndex])\n          tickDone();\n        if (domain)\n          domain.exit();\n      }\n      tickDone();\n      _runMicrotasks();\n      emitPendingUnhandledRejections();\n    } while (tickInfo[kLength] !== 0);\n  }\n\n  function TickObject(c, args) {\n    this.callback = c;\n    this.domain = process.domain || null;\n    this.args = args;\n  }\n\n  function nextTick(callback) {\n    if (typeof callback !== 'function')\n      throw new TypeError('callback is not a function');\n    // on the way out, don't bother. it won't get fired anyway.\n    if (process._exiting)\n      return;\n\n    var args;\n    if (arguments.length > 1) {\n      args = new Array(arguments.length - 1);\n      for (var i = 1; i < arguments.length; i++)\n        args[i - 1] = arguments[i];\n    }\n\n    nextTickQueue.push(new TickObject(callback, args));\n    tickInfo[kLength]++;\n  }\n}\n\n});"}
{"type":"scope","id":56,"scope":{"type":"local","name":"afterWrite","vars":[196,192,222,195]}}
{"type":"frame","id":131,"frame":{"fn":"afterWrite","script":"56","line":384,"col":2,"scopes":[56,24]}}
{"type":"var","id":223,"name":"args","val":"Array[4]"}
{"type":"scope","id":57,"scope":{"type":"local","name":"_combinedTickCallback","vars":[223,5]}}
{"type":"var","id":224,"name":"emitPendingUnhandledRejections","val":"[Function]"}
{"type":"var","id":225,"name":"nextTickQueue","val":"Array[1]"}
{"type":"var","id":226,"name":"microtasksScheduled","val":false}
{"type":"var","id":227,"name":"_runMicrotasks","val":"[Function]"}
{"type":"var","id":228,"name":"kIndex","val":0}
{"type":"var","id":229,"name":"kLength","val":1}
{"type":"var","id":230,"name":"tickInfo","val":"Uint32Array[2]"}
{"type":"var","id":231,"name":"tickDone","val":"[Function]"}
{"type":"var","id":232,"name":"scheduleMicrotasks","val":"[Function]"}
{"type":"var","id":233,"name":"runMicrotasksCallback","val":"[Function]"}
{"type":"var","id":234,"name":"_combinedTickCallback","val":"[Function]"}
{"type":"var","id":235,"name":"TickObject","val":"[Function]"}
{"type":"scope","id":58,"scope":{"type":"closure","name":"setupNextTick","vars":[224,225,226,227,228,229,230,231,232,233,234,235]}}
{"type":"scope","id":59,"scope":{"type":"closure","vars":[70]}}
{"type":"frame","id":132,"frame":{"fn":"_combinedTickCallback","script":"45","line":79,"col":19,"scopes":[57,58,59]}}
{"type":"var","id":236,"name":"tock","val":"TickObject"}
{"type":"scope","id":60,"scope":{"type":"local","name":"_tickCallback","vars":[5,223,236]}}
{"type":"frame","id":133,"frame":{"fn":"_tickCallback","script":"45","line":97,"col":8,"scopes":[60,58,59]}}
{"date":1485030019686,"type":"break","frames":[131,132,133]}
{"type":"frame","id":134,"frame":{"fn":"afterWrite","script":"56","line":385,"col":4,"scopes":[56,24]}}
{"date":1485030019693,"type":"break","frames":[134,132,133]}
{"type":"scope","id":61,"scope":{"type":"local","name":"onwriteDrain","vars":[196,192]}}
{"type":"frame","id":135,"frame":{"fn":"onwriteDrain","script":"56","line":395,"col":2,"scopes":[61,24]}}
{"date":1485030019700,"type":"break","frames":[135,134,132,133]}
{"type":"frame","id":136,"frame":{"fn":"onwriteDrain","script":"56","line":399,"col":0,"scopes":[61,24]}}
{"date":1485030019708,"type":"break","frames":[136,134,132,133]}
{"type":"frame","id":137,"frame":{"fn":"afterWrite","script":"56","line":386,"col":2,"scopes":[56,24]}}
{"date":1485030019714,"type":"break","frames":[137,132,133]}
{"type":"frame","id":138,"frame":{"fn":"afterWrite","script":"56","line":387,"col":2,"scopes":[56,24]}}
{"date":1485030019721,"type":"break","frames":[138,132,133]}
{"type":"scope","id":62,"scope":{"type":"local","name":"nop","vars":[]}}
{"type":"frame","id":139,"frame":{"fn":"nop","script":"56","line":16,"col":16,"scopes":[62,24]}}
{"date":1485030019729,"type":"break","frames":[139,138,132,133]}
{"type":"frame","id":140,"frame":{"fn":"afterWrite","script":"56","line":388,"col":2,"scopes":[56,24]}}
{"date":1485030019735,"type":"break","frames":[140,132,133]}
{"type":"var","id":237,"name":"need","val":"[undefined]"}
{"type":"scope","id":63,"scope":{"type":"local","name":"finishMaybe","vars":[196,192,237]}}
{"type":"frame","id":141,"frame":{"fn":"finishMaybe","script":"56","line":509,"col":13,"scopes":[63,24]}}
{"date":1485030019743,"type":"break","frames":[141,140,132,133]}
{"date":1485030019752,"type":"break","frames":[113,141,140,132,133]}
{"date":1485030019762,"type":"break","frames":[114,141,140,132,133]}
{"type":"var","id":238,"name":"need","val":false}
{"type":"scope","id":64,"scope":{"type":"local","name":"finishMaybe","vars":[196,192,238]}}
{"type":"frame","id":142,"frame":{"fn":"finishMaybe","script":"56","line":510,"col":2,"scopes":[64,24]}}
{"date":1485030019770,"type":"break","frames":[142,140,132,133]}
{"type":"frame","id":143,"frame":{"fn":"finishMaybe","script":"56","line":519,"col":2,"scopes":[64,24]}}
{"date":1485030019778,"type":"break","frames":[143,140,132,133]}
{"type":"frame","id":144,"frame":{"fn":"finishMaybe","script":"56","line":520,"col":0,"scopes":[64,24]}}
{"date":1485030019786,"type":"break","frames":[144,140,132,133]}
{"type":"frame","id":145,"frame":{"fn":"afterWrite","script":"56","line":389,"col":0,"scopes":[56,24]}}
{"date":1485030019792,"type":"break","frames":[145,132,133]}
{"type":"var","id":239,"name":"now","val":26438}
{"type":"var","id":240,"name":"diff","val":1002}
{"type":"scope","id":65,"scope":{"type":"local","name":"listOnTimeout","vars":[36,38,239,240,3,41,42]}}
{"type":"frame","id":146,"frame":{"fn":"listOnTimeout","script":"40","line":206,"col":4,"scopes":[65,3]}}
{"date":1485030020693,"type":"break","frames":[0,1,2,146]}
{"type":"var","id":241,"name":"time","val":"20:20:20"}
{"type":"scope","id":66,"scope":{"type":"local","name":"onInterval","vars":[241,1]}}
{"type":"frame","id":147,"frame":{"fn":"onInterval","script":"60","line":8,"col":17,"scopes":[66,1]}}
{"date":1485030020702,"type":"break","frames":[147,1,2,146]}
{"type":"var","id":242,"name":"s","val":"20:20:20"}
{"type":"scope","id":67,"scope":{"type":"local","name":"leftPad","vars":[242,45]}}
{"type":"frame","id":148,"frame":{"fn":"leftPad","script":"60","line":13,"col":2,"scopes":[67,1]}}
{"date":1485030020712,"type":"break","frames":[148,147,1,2,146]}
{"type":"frame","id":149,"frame":{"fn":"leftPad","script":"60","line":15,"col":2,"scopes":[67,1]}}
{"date":1485030020722,"type":"break","frames":[149,147,1,2,146]}
{"type":"frame","id":150,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[67,1]}}
{"date":1485030020731,"type":"break","frames":[150,147,1,2,146]}
{"type":"frame","id":151,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[67,1]}}
{"date":1485030020743,"type":"break","frames":[151,147,1,2,146]}
{"type":"var","id":243,"name":"s","val":" 20:20:20"}
{"type":"scope","id":68,"scope":{"type":"local","name":"leftPad","vars":[243,45]}}
{"type":"frame","id":152,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[68,1]}}
{"date":1485030020753,"type":"break","frames":[152,147,1,2,146]}
{"type":"frame","id":153,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[68,1]}}
{"date":1485030020762,"type":"break","frames":[153,147,1,2,146]}
{"type":"var","id":244,"name":"s","val":"  20:20:20"}
{"type":"scope","id":69,"scope":{"type":"local","name":"leftPad","vars":[244,45]}}
{"type":"frame","id":154,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[69,1]}}
{"date":1485030020771,"type":"break","frames":[154,147,1,2,146]}
{"type":"frame","id":155,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[69,1]}}
{"date":1485030020780,"type":"break","frames":[155,147,1,2,146]}
{"type":"var","id":245,"name":"s","val":"   20:20:20"}
{"type":"scope","id":70,"scope":{"type":"local","name":"leftPad","vars":[245,45]}}
{"type":"frame","id":156,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[70,1]}}
{"date":1485030020789,"type":"break","frames":[156,147,1,2,146]}
{"type":"frame","id":157,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[70,1]}}
{"date":1485030020798,"type":"break","frames":[157,147,1,2,146]}
{"type":"var","id":246,"name":"s","val":"    20:20:20"}
{"type":"scope","id":71,"scope":{"type":"local","name":"leftPad","vars":[246,45]}}
{"type":"frame","id":158,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[71,1]}}
{"date":1485030020807,"type":"break","frames":[158,147,1,2,146]}
{"type":"frame","id":159,"frame":{"fn":"leftPad","script":"60","line":21,"col":2,"scopes":[71,1]}}
{"date":1485030020816,"type":"break","frames":[159,147,1,2,146]}
{"type":"frame","id":160,"frame":{"fn":"leftPad","script":"60","line":22,"col":0,"scopes":[71,1]}}
{"date":1485030020825,"type":"break","frames":[160,147,1,2,146]}
{"type":"var","id":247,"name":"padded","val":"    20:20:20"}
{"type":"scope","id":72,"scope":{"type":"local","name":"onInterval","vars":[241,247]}}
{"type":"frame","id":161,"frame":{"fn":"onInterval","script":"60","line":9,"col":2,"scopes":[72,1]}}
{"date":1485030020834,"type":"break","frames":[161,1,2,146]}
{"date":1485030020844,"type":"break","frames":[19,161,1,2,146]}
{"date":1485030020854,"type":"break","frames":[20,161,1,2,146]}
{"date":1485030020864,"type":"break","frames":[21,161,1,2,146]}
{"type":"frame","id":162,"frame":{"fn":"onInterval","script":"60","line":9,"col":10,"scopes":[72,1]}}
{"date":1485030020873,"type":"break","frames":[22,162,1,2,146]}
{"type":"var","id":248,"name":"f","val":"time:     20:20:20"}
{"type":"scope","id":73,"scope":{"type":"local","name":"exports.format","vars":[248,74,75,76,77,78,79,80]}}
{"type":"frame","id":163,"frame":{"fn":"exports.format","script":"37","line":68,"col":2,"scopes":[73,19]}}
{"date":1485030020886,"type":"break","frames":[163,25,162,1,2,146]}
{"type":"frame","id":164,"frame":{"fn":"exports.format","script":"37","line":76,"col":24,"scopes":[73,19]}}
{"date":1485030020898,"type":"break","frames":[164,25,162,1,2,146]}
{"type":"scope","id":74,"scope":{"type":"local","name":"exports.format","vars":[248,74,75,119,77,78,79,80]}}
{"type":"frame","id":165,"frame":{"fn":"exports.format","script":"37","line":78,"col":2,"scopes":[74,19]}}
{"date":1485030020910,"type":"break","frames":[165,25,162,1,2,146]}
{"type":"frame","id":166,"frame":{"fn":"exports.format","script":"37","line":133,"col":0,"scopes":[74,19]}}
{"date":1485030020922,"type":"break","frames":[166,25,162,1,2,146]}
{"type":"var","id":249,"name":"chunk","val":"time:     20:20:20\n"}
{"type":"scope","id":75,"scope":{"type":"local","name":"Socket.write","vars":[249,121,122,74]}}
{"type":"frame","id":167,"frame":{"fn":"Socket.write","script":"63","line":653,"col":2,"scopes":[75,22]}}
{"date":1485030020934,"type":"break","frames":[167,30,162,1,2,146]}
{"type":"frame","id":168,"frame":{"fn":"Socket.write","script":"63","line":657,"col":2,"scopes":[75,22]}}
{"date":1485030020946,"type":"break","frames":[168,30,162,1,2,146]}
{"type":"scope","id":76,"scope":{"type":"local","name":"Writable.write","vars":[249,121,122,169,170]}}
{"type":"frame","id":169,"frame":{"fn":"Writable.write","script":"56","line":226,"col":18,"scopes":[76,24]}}
{"type":"frame","id":170,"frame":{"fn":"Socket.write","script":"63","line":657,"col":39,"scopes":[75,22]}}
{"date":1485030020960,"type":"break","frames":[169,170,30,162,1,2,146]}
{"type":"scope","id":77,"scope":{"type":"local","name":"Writable.write","vars":[249,121,122,192,170]}}
{"type":"frame","id":171,"frame":{"fn":"Writable.write","script":"56","line":227,"col":12,"scopes":[77,24]}}
{"date":1485030020974,"type":"break","frames":[171,170,30,162,1,2,146]}
{"type":"scope","id":78,"scope":{"type":"local","name":"Writable.write","vars":[249,121,122,192,193]}}
{"type":"frame","id":172,"frame":{"fn":"Writable.write","script":"56","line":229,"col":2,"scopes":[78,24]}}
{"date":1485030020990,"type":"break","frames":[172,170,30,162,1,2,146]}
{"type":"frame","id":173,"frame":{"fn":"Writable.write","script":"56","line":234,"col":2,"scopes":[78,24]}}
{"date":1485030021006,"type":"break","frames":[173,170,30,162,1,2,146]}
{"type":"frame","id":174,"frame":{"fn":"Writable.write","script":"56","line":236,"col":7,"scopes":[78,24]}}
{"date":1485030021021,"type":"break","frames":[174,170,30,162,1,2,146]}
{"type":"frame","id":175,"frame":{"fn":"Writable.write","script":"56","line":237,"col":4,"scopes":[78,24]}}
{"date":1485030021036,"type":"break","frames":[175,170,30,162,1,2,146]}
{"type":"scope","id":79,"scope":{"type":"local","name":"Writable.write","vars":[249,194,122,192,193]}}
{"type":"frame","id":176,"frame":{"fn":"Writable.write","script":"56","line":239,"col":2,"scopes":[79,24]}}
{"date":1485030021053,"type":"break","frames":[176,170,30,162,1,2,146]}
{"type":"frame","id":177,"frame":{"fn":"Writable.write","script":"56","line":240,"col":4,"scopes":[79,24]}}
{"date":1485030021068,"type":"break","frames":[177,170,30,162,1,2,146]}
{"type":"scope","id":80,"scope":{"type":"local","name":"Writable.write","vars":[249,194,195,192,193]}}
{"type":"frame","id":178,"frame":{"fn":"Writable.write","script":"56","line":242,"col":2,"scopes":[80,24]}}
{"date":1485030021083,"type":"break","frames":[178,170,30,162,1,2,146]}
{"type":"frame","id":179,"frame":{"fn":"Writable.write","script":"56","line":244,"col":7,"scopes":[80,24]}}
{"date":1485030021097,"type":"break","frames":[179,170,30,162,1,2,146]}
{"type":"scope","id":81,"scope":{"type":"local","name":"validChunk","vars":[196,192,249,195,197,198]}}
{"type":"frame","id":180,"frame":{"fn":"validChunk","script":"56","line":204,"col":14,"scopes":[81,24]}}
{"type":"frame","id":181,"frame":{"fn":"Writable.write","script":"56","line":244,"col":11,"scopes":[80,24]}}
{"date":1485030021113,"type":"break","frames":[180,181,170,30,162,1,2,146]}
{"type":"scope","id":82,"scope":{"type":"local","name":"validChunk","vars":[196,192,249,195,199,198]}}
{"type":"frame","id":182,"frame":{"fn":"validChunk","script":"56","line":205,"col":11,"scopes":[82,24]}}
{"date":1485030021129,"type":"break","frames":[182,181,170,30,162,1,2,146]}
{"type":"scope","id":83,"scope":{"type":"local","name":"validChunk","vars":[196,192,249,195,199,200]}}
{"type":"frame","id":183,"frame":{"fn":"validChunk","script":"56","line":209,"col":2,"scopes":[83,24]}}
{"date":1485030021148,"type":"break","frames":[183,181,170,30,162,1,2,146]}
{"type":"frame","id":184,"frame":{"fn":"validChunk","script":"56","line":211,"col":9,"scopes":[83,24]}}
{"date":1485030021164,"type":"break","frames":[184,181,170,30,162,1,2,146]}
{"type":"frame","id":185,"frame":{"fn":"validChunk","script":"56","line":217,"col":2,"scopes":[83,24]}}
{"date":1485030021180,"type":"break","frames":[185,181,170,30,162,1,2,146]}
{"type":"frame","id":186,"frame":{"fn":"validChunk","script":"56","line":222,"col":2,"scopes":[83,24]}}
{"date":1485030021195,"type":"break","frames":[186,181,170,30,162,1,2,146]}
{"type":"frame","id":187,"frame":{"fn":"validChunk","script":"56","line":223,"col":0,"scopes":[83,24]}}
{"date":1485030021214,"type":"break","frames":[187,181,170,30,162,1,2,146]}
{"type":"frame","id":188,"frame":{"fn":"Writable.write","script":"56","line":245,"col":4,"scopes":[80,24]}}
{"date":1485030021229,"type":"break","frames":[188,170,30,162,1,2,146]}
{"type":"frame","id":189,"frame":{"fn":"Writable.write","script":"56","line":246,"col":4,"scopes":[80,24]}}
{"date":1485030021243,"type":"break","frames":[189,170,30,162,1,2,146]}
{"type":"scope","id":84,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,249,194,195,201,170,202]}}
{"type":"frame","id":190,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":2,"scopes":[84,24]}}
{"type":"frame","id":191,"frame":{"fn":"Writable.write","script":"56","line":246,"col":10,"scopes":[80,24]}}
{"date":1485030021259,"type":"break","frames":[190,191,170,30,162,1,2,146]}
{"type":"scope","id":85,"scope":{"type":"local","name":"decodeChunk","vars":[192,249,194]}}
{"type":"frame","id":192,"frame":{"fn":"decodeChunk","script":"56","line":284,"col":2,"scopes":[85,24]}}
{"type":"frame","id":193,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":10,"scopes":[84,24]}}
{"date":1485030021276,"type":"break","frames":[192,193,191,170,30,162,1,2,146]}
{"type":"frame","id":194,"frame":{"fn":"decodeChunk","script":"56","line":289,"col":2,"scopes":[85,24]}}
{"date":1485030021293,"type":"break","frames":[194,193,191,170,30,162,1,2,146]}
{"type":"frame","id":195,"frame":{"fn":"decodeChunk","script":"56","line":290,"col":0,"scopes":[85,24]}}
{"date":1485030021310,"type":"break","frames":[195,193,191,170,30,162,1,2,146]}
{"type":"frame","id":196,"frame":{"fn":"writeOrBuffer","script":"56","line":298,"col":2,"scopes":[84,24]}}
{"date":1485030021325,"type":"break","frames":[196,191,170,30,162,1,2,146]}
{"type":"frame","id":197,"frame":{"fn":"writeOrBuffer","script":"56","line":300,"col":12,"scopes":[84,24]}}
{"date":1485030021341,"type":"break","frames":[197,191,170,30,162,1,2,146]}
{"type":"scope","id":86,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,249,194,195,203,170,202]}}
{"type":"frame","id":198,"frame":{"fn":"writeOrBuffer","script":"56","line":302,"col":2,"scopes":[86,24]}}
{"date":1485030021357,"type":"break","frames":[198,191,170,30,162,1,2,146]}
{"type":"frame","id":199,"frame":{"fn":"writeOrBuffer","script":"56","line":304,"col":25,"scopes":[86,24]}}
{"date":1485030021373,"type":"break","frames":[199,191,170,30,162,1,2,146]}
{"type":"scope","id":87,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,249,194,195,203,204,202]}}
{"type":"frame","id":200,"frame":{"fn":"writeOrBuffer","script":"56","line":306,"col":2,"scopes":[87,24]}}
{"date":1485030021389,"type":"break","frames":[200,191,170,30,162,1,2,146]}
{"type":"frame","id":201,"frame":{"fn":"writeOrBuffer","script":"56","line":309,"col":2,"scopes":[87,24]}}
{"date":1485030021405,"type":"break","frames":[201,191,170,30,162,1,2,146]}
{"type":"frame","id":202,"frame":{"fn":"writeOrBuffer","script":"56","line":319,"col":4,"scopes":[87,24]}}
{"date":1485030021420,"type":"break","frames":[202,191,170,30,162,1,2,146]}
{"type":"scope","id":88,"scope":{"type":"local","name":"doWrite","vars":[196,192,205,203,249,194,195]}}
{"type":"frame","id":203,"frame":{"fn":"doWrite","script":"56","line":326,"col":2,"scopes":[88,24]}}
{"date":1485030021438,"type":"break","frames":[203,202,191,170,30,162,1,2,146]}
{"type":"frame","id":204,"frame":{"fn":"doWrite","script":"56","line":327,"col":2,"scopes":[88,24]}}
{"date":1485030021455,"type":"break","frames":[204,202,191,170,30,162,1,2,146]}
{"type":"frame","id":205,"frame":{"fn":"doWrite","script":"56","line":328,"col":2,"scopes":[88,24]}}
{"date":1485030021472,"type":"break","frames":[205,202,191,170,30,162,1,2,146]}
{"type":"frame","id":206,"frame":{"fn":"doWrite","script":"56","line":329,"col":2,"scopes":[88,24]}}
{"date":1485030021490,"type":"break","frames":[206,202,191,170,30,162,1,2,146]}
{"type":"frame","id":207,"frame":{"fn":"doWrite","script":"56","line":330,"col":2,"scopes":[88,24]}}
{"date":1485030021507,"type":"break","frames":[207,202,191,170,30,162,1,2,146]}
{"type":"frame","id":208,"frame":{"fn":"doWrite","script":"56","line":333,"col":4,"scopes":[88,24]}}
{"date":1485030021529,"type":"break","frames":[208,202,191,170,30,162,1,2,146]}
{"type":"var","id":250,"name":"data","val":"time:     20:20:20\n"}
{"type":"scope","id":89,"scope":{"type":"local","name":"Socket._write","vars":[250,194,195]}}
{"type":"frame","id":209,"frame":{"fn":"Socket._write","script":"63","line":730,"col":2,"scopes":[89,22]}}
{"type":"frame","id":210,"frame":{"fn":"doWrite","script":"56","line":333,"col":11,"scopes":[88,24]}}
{"date":1485030021549,"type":"break","frames":[209,210,202,191,170,30,162,1,2,146]}
{"type":"scope","id":90,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[207,208,209,80,210,211,195,194,250,205]}}
{"type":"frame","id":211,"frame":{"fn":"Socket._writeGeneric","script":"63","line":665,"col":2,"scopes":[90,22]}}
{"type":"frame","id":212,"frame":{"fn":"Socket._write","script":"63","line":730,"col":7,"scopes":[89,22]}}
{"date":1485030021572,"type":"break","frames":[211,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":213,"frame":{"fn":"Socket._writeGeneric","script":"63","line":673,"col":2,"scopes":[90,22]}}
{"date":1485030021597,"type":"break","frames":[213,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":214,"frame":{"fn":"Socket._writeGeneric","script":"63","line":674,"col":2,"scopes":[90,22]}}
{"date":1485030021620,"type":"break","frames":[214,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":215,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":2,"scopes":[90,22]}}
{"date":1485030021643,"type":"break","frames":[215,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":216,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":7,"scopes":[90,22]}}
{"date":1485030021670,"type":"break","frames":[79,216,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030021695,"type":"break","frames":[81,216,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030021721,"type":"break","frames":[82,216,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":217,"frame":{"fn":"Socket._writeGeneric","script":"63","line":678,"col":2,"scopes":[90,22]}}
{"date":1485030021745,"type":"break","frames":[217,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":218,"frame":{"fn":"Socket._writeGeneric","script":"63","line":683,"col":12,"scopes":[90,22]}}
{"date":1485030021770,"type":"break","frames":[218,212,210,202,191,170,30,162,1,2,146]}
{"type":"scope","id":91,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,211,195,194,250,205]}}
{"type":"frame","id":219,"frame":{"fn":"Socket._writeGeneric","script":"63","line":684,"col":2,"scopes":[91,22]}}
{"date":1485030021794,"type":"break","frames":[219,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":220,"frame":{"fn":"Socket._writeGeneric","script":"63","line":685,"col":2,"scopes":[91,22]}}
{"date":1485030021817,"type":"break","frames":[220,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":221,"frame":{"fn":"Socket._writeGeneric","script":"63","line":686,"col":2,"scopes":[91,22]}}
{"date":1485030021840,"type":"break","frames":[221,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":222,"frame":{"fn":"Socket._writeGeneric","script":"63","line":689,"col":2,"scopes":[91,22]}}
{"date":1485030021864,"type":"break","frames":[222,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":223,"frame":{"fn":"Socket._writeGeneric","script":"63","line":702,"col":4,"scopes":[91,22]}}
{"date":1485030021890,"type":"break","frames":[223,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":224,"frame":{"fn":"Socket._writeGeneric","script":"63","line":705,"col":6,"scopes":[91,22]}}
{"date":1485030021913,"type":"break","frames":[224,212,210,202,191,170,30,162,1,2,146]}
{"type":"scope","id":92,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,216,195,194,250,205]}}
{"type":"frame","id":225,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":4,"scopes":[92,22]}}
{"date":1485030021937,"type":"break","frames":[225,212,210,202,191,170,30,162,1,2,146]}
{"type":"scope","id":93,"scope":{"type":"local","name":"createWriteReq","vars":[215,217,250,194]}}
{"type":"frame","id":226,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":10,"scopes":[93,22]}}
{"type":"frame","id":227,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":10,"scopes":[92,22]}}
{"date":1485030021962,"type":"break","frames":[226,227,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":228,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":2,"scopes":[93,22]}}
{"date":1485030021991,"type":"break","frames":[228,227,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":229,"frame":{"fn":"createWriteReq","script":"63","line":744,"col":6,"scopes":[93,22]}}
{"date":1485030022018,"type":"break","frames":[229,227,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":230,"frame":{"fn":"createWriteReq","script":"63","line":758,"col":0,"scopes":[93,22]}}
{"date":1485030022045,"type":"break","frames":[230,227,212,210,202,191,170,30,162,1,2,146]}
{"type":"scope","id":94,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,218,209,80,210,216,195,194,250,205]}}
{"type":"frame","id":231,"frame":{"fn":"Socket._writeGeneric","script":"63","line":710,"col":2,"scopes":[94,22]}}
{"date":1485030022069,"type":"break","frames":[231,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":232,"frame":{"fn":"Socket._writeGeneric","script":"63","line":713,"col":2,"scopes":[94,22]}}
{"date":1485030022095,"type":"break","frames":[232,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":233,"frame":{"fn":"Socket._writeGeneric","script":"63","line":717,"col":2,"scopes":[94,22]}}
{"date":1485030022119,"type":"break","frames":[233,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":234,"frame":{"fn":"Socket._writeGeneric","script":"63","line":720,"col":4,"scopes":[94,22]}}
{"date":1485030022143,"type":"break","frames":[234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022168,"type":"break","frames":[101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022195,"type":"break","frames":[102,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022225,"type":"break","frames":[103,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022261,"type":"break","frames":[104,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022290,"type":"break","frames":[105,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022320,"type":"break","frames":[106,105,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022350,"type":"break","frames":[107,105,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022379,"type":"break","frames":[108,105,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022414,"type":"break","frames":[109,105,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022443,"type":"break","frames":[110,105,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022472,"type":"break","frames":[111,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022500,"type":"break","frames":[112,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022528,"type":"break","frames":[113,112,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022557,"type":"break","frames":[114,112,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022585,"type":"break","frames":[115,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022618,"type":"break","frames":[116,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022645,"type":"break","frames":[117,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022676,"type":"break","frames":[118,101,234,212,210,202,191,170,30,162,1,2,146]}
{"date":1485030022701,"type":"break","frames":[119,234,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":235,"frame":{"fn":"Socket._writeGeneric","script":"63","line":721,"col":0,"scopes":[94,22]}}
{"date":1485030022725,"type":"break","frames":[235,212,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":236,"frame":{"fn":"Socket._write","script":"63","line":731,"col":0,"scopes":[89,22]}}
{"date":1485030022746,"type":"break","frames":[236,210,202,191,170,30,162,1,2,146]}
{"type":"frame","id":237,"frame":{"fn":"doWrite","script":"56","line":334,"col":2,"scopes":[88,24]}}
{"date":1485030022764,"type":"break","frames":[237,202,191,170,30,162,1,2,146]}
{"type":"frame","id":238,"frame":{"fn":"doWrite","script":"56","line":335,"col":0,"scopes":[88,24]}}
{"date":1485030022782,"type":"break","frames":[238,202,191,170,30,162,1,2,146]}
{"type":"frame","id":239,"frame":{"fn":"writeOrBuffer","script":"56","line":322,"col":2,"scopes":[87,24]}}
{"date":1485030022798,"type":"break","frames":[239,191,170,30,162,1,2,146]}
{"type":"frame","id":240,"frame":{"fn":"writeOrBuffer","script":"56","line":323,"col":0,"scopes":[87,24]}}
{"date":1485030022813,"type":"break","frames":[240,191,170,30,162,1,2,146]}
{"type":"scope","id":95,"scope":{"type":"local","name":"Writable.write","vars":[249,194,195,192,204]}}
{"type":"frame","id":241,"frame":{"fn":"Writable.write","script":"56","line":249,"col":2,"scopes":[95,24]}}
{"date":1485030022827,"type":"break","frames":[241,170,30,162,1,2,146]}
{"type":"frame","id":242,"frame":{"fn":"Writable.write","script":"56","line":250,"col":0,"scopes":[95,24]}}
{"date":1485030022841,"type":"break","frames":[242,170,30,162,1,2,146]}
{"type":"frame","id":243,"frame":{"fn":"Socket.write","script":"63","line":658,"col":0,"scopes":[75,22]}}
{"date":1485030022853,"type":"break","frames":[243,30,162,1,2,146]}
{"date":1485030022863,"type":"break","frames":[129,162,1,2,146]}
{"type":"frame","id":244,"frame":{"fn":"onInterval","script":"60","line":10,"col":0,"scopes":[72,1]}}
{"date":1485030022871,"type":"break","frames":[244,1,2,146]}
{"date":1485030022878,"type":"break","frames":[131,132,133]}
{"date":1485030022884,"type":"break","frames":[134,132,133]}
{"date":1485030022892,"type":"break","frames":[135,134,132,133]}
{"date":1485030022900,"type":"break","frames":[136,134,132,133]}
{"date":1485030022906,"type":"break","frames":[137,132,133]}
{"date":1485030022913,"type":"break","frames":[138,132,133]}
{"date":1485030022921,"type":"break","frames":[139,138,132,133]}
{"date":1485030022929,"type":"break","frames":[140,132,133]}
{"date":1485030022937,"type":"break","frames":[141,140,132,133]}
{"date":1485030022947,"type":"break","frames":[113,141,140,132,133]}
{"date":1485030022957,"type":"break","frames":[114,141,140,132,133]}
{"date":1485030022965,"type":"break","frames":[142,140,132,133]}
{"date":1485030022973,"type":"break","frames":[143,140,132,133]}
{"date":1485030022981,"type":"break","frames":[144,140,132,133]}
{"date":1485030022988,"type":"break","frames":[145,132,133]}
{"type":"var","id":251,"name":"now","val":29629}
{"type":"var","id":252,"name":"diff","val":1001}
{"type":"scope","id":96,"scope":{"type":"local","name":"listOnTimeout","vars":[36,38,251,252,3,41,42]}}
{"type":"frame","id":245,"frame":{"fn":"listOnTimeout","script":"40","line":206,"col":4,"scopes":[96,3]}}
{"date":1485030023884,"type":"break","frames":[0,1,2,245]}
{"type":"var","id":253,"name":"time","val":"20:20:23"}
{"type":"scope","id":97,"scope":{"type":"local","name":"onInterval","vars":[253,1]}}
{"type":"frame","id":246,"frame":{"fn":"onInterval","script":"60","line":8,"col":17,"scopes":[97,1]}}
{"date":1485030023893,"type":"break","frames":[246,1,2,245]}
{"type":"var","id":254,"name":"s","val":"20:20:23"}
{"type":"scope","id":98,"scope":{"type":"local","name":"leftPad","vars":[254,45]}}
{"type":"frame","id":247,"frame":{"fn":"leftPad","script":"60","line":13,"col":2,"scopes":[98,1]}}
{"date":1485030023902,"type":"break","frames":[247,246,1,2,245]}
{"type":"frame","id":248,"frame":{"fn":"leftPad","script":"60","line":15,"col":2,"scopes":[98,1]}}
{"date":1485030023912,"type":"break","frames":[248,246,1,2,245]}
{"type":"frame","id":249,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[98,1]}}
{"date":1485030023921,"type":"break","frames":[249,246,1,2,245]}
{"type":"frame","id":250,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[98,1]}}
{"date":1485030023930,"type":"break","frames":[250,246,1,2,245]}
{"type":"var","id":255,"name":"s","val":" 20:20:23"}
{"type":"scope","id":99,"scope":{"type":"local","name":"leftPad","vars":[255,45]}}
{"type":"frame","id":251,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[99,1]}}
{"date":1485030023939,"type":"break","frames":[251,246,1,2,245]}
{"type":"frame","id":252,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[99,1]}}
{"date":1485030023949,"type":"break","frames":[252,246,1,2,245]}
{"type":"var","id":256,"name":"s","val":"  20:20:23"}
{"type":"scope","id":100,"scope":{"type":"local","name":"leftPad","vars":[256,45]}}
{"type":"frame","id":253,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[100,1]}}
{"date":1485030023958,"type":"break","frames":[253,246,1,2,245]}
{"type":"frame","id":254,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[100,1]}}
{"date":1485030023969,"type":"break","frames":[254,246,1,2,245]}
{"type":"var","id":257,"name":"s","val":"   20:20:23"}
{"type":"scope","id":101,"scope":{"type":"local","name":"leftPad","vars":[257,45]}}
{"type":"frame","id":255,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[101,1]}}
{"date":1485030023979,"type":"break","frames":[255,246,1,2,245]}
{"type":"frame","id":256,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[101,1]}}
{"date":1485030023989,"type":"break","frames":[256,246,1,2,245]}
{"type":"var","id":258,"name":"s","val":"    20:20:23"}
{"type":"scope","id":102,"scope":{"type":"local","name":"leftPad","vars":[258,45]}}
{"type":"frame","id":257,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[102,1]}}
{"date":1485030023998,"type":"break","frames":[257,246,1,2,245]}
{"type":"frame","id":258,"frame":{"fn":"leftPad","script":"60","line":21,"col":2,"scopes":[102,1]}}
{"date":1485030024007,"type":"break","frames":[258,246,1,2,245]}
{"type":"frame","id":259,"frame":{"fn":"leftPad","script":"60","line":22,"col":0,"scopes":[102,1]}}
{"date":1485030024017,"type":"break","frames":[259,246,1,2,245]}
{"type":"var","id":259,"name":"padded","val":"    20:20:23"}
{"type":"scope","id":103,"scope":{"type":"local","name":"onInterval","vars":[253,259]}}
{"type":"frame","id":260,"frame":{"fn":"onInterval","script":"60","line":9,"col":2,"scopes":[103,1]}}
{"date":1485030024026,"type":"break","frames":[260,1,2,245]}
{"date":1485030024036,"type":"break","frames":[19,260,1,2,245]}
{"date":1485030024046,"type":"break","frames":[20,260,1,2,245]}
{"date":1485030024056,"type":"break","frames":[21,260,1,2,245]}
{"type":"frame","id":261,"frame":{"fn":"onInterval","script":"60","line":9,"col":10,"scopes":[103,1]}}
{"date":1485030024066,"type":"break","frames":[22,261,1,2,245]}
{"type":"var","id":260,"name":"f","val":"time:     20:20:23"}
{"type":"scope","id":104,"scope":{"type":"local","name":"exports.format","vars":[260,74,75,76,77,78,79,80]}}
{"type":"frame","id":262,"frame":{"fn":"exports.format","script":"37","line":68,"col":2,"scopes":[104,19]}}
{"date":1485030024079,"type":"break","frames":[262,25,261,1,2,245]}
{"type":"frame","id":263,"frame":{"fn":"exports.format","script":"37","line":76,"col":24,"scopes":[104,19]}}
{"date":1485030024091,"type":"break","frames":[263,25,261,1,2,245]}
{"type":"scope","id":105,"scope":{"type":"local","name":"exports.format","vars":[260,74,75,119,77,78,79,80]}}
{"type":"frame","id":264,"frame":{"fn":"exports.format","script":"37","line":78,"col":2,"scopes":[105,19]}}
{"date":1485030024103,"type":"break","frames":[264,25,261,1,2,245]}
{"type":"frame","id":265,"frame":{"fn":"exports.format","script":"37","line":133,"col":0,"scopes":[105,19]}}
{"date":1485030024115,"type":"break","frames":[265,25,261,1,2,245]}
{"type":"var","id":261,"name":"chunk","val":"time:     20:20:23\n"}
{"type":"scope","id":106,"scope":{"type":"local","name":"Socket.write","vars":[261,121,122,74]}}
{"type":"frame","id":266,"frame":{"fn":"Socket.write","script":"63","line":653,"col":2,"scopes":[106,22]}}
{"date":1485030024127,"type":"break","frames":[266,30,261,1,2,245]}
{"type":"frame","id":267,"frame":{"fn":"Socket.write","script":"63","line":657,"col":2,"scopes":[106,22]}}
{"date":1485030024139,"type":"break","frames":[267,30,261,1,2,245]}
{"type":"scope","id":107,"scope":{"type":"local","name":"Writable.write","vars":[261,121,122,169,170]}}
{"type":"frame","id":268,"frame":{"fn":"Writable.write","script":"56","line":226,"col":18,"scopes":[107,24]}}
{"type":"frame","id":269,"frame":{"fn":"Socket.write","script":"63","line":657,"col":39,"scopes":[106,22]}}
{"date":1485030024153,"type":"break","frames":[268,269,30,261,1,2,245]}
{"type":"scope","id":108,"scope":{"type":"local","name":"Writable.write","vars":[261,121,122,192,170]}}
{"type":"frame","id":270,"frame":{"fn":"Writable.write","script":"56","line":227,"col":12,"scopes":[108,24]}}
{"date":1485030024167,"type":"break","frames":[270,269,30,261,1,2,245]}
{"type":"scope","id":109,"scope":{"type":"local","name":"Writable.write","vars":[261,121,122,192,193]}}
{"type":"frame","id":271,"frame":{"fn":"Writable.write","script":"56","line":229,"col":2,"scopes":[109,24]}}
{"date":1485030024181,"type":"break","frames":[271,269,30,261,1,2,245]}
{"type":"frame","id":272,"frame":{"fn":"Writable.write","script":"56","line":234,"col":2,"scopes":[109,24]}}
{"date":1485030024195,"type":"break","frames":[272,269,30,261,1,2,245]}
{"type":"frame","id":273,"frame":{"fn":"Writable.write","script":"56","line":236,"col":7,"scopes":[109,24]}}
{"date":1485030024209,"type":"break","frames":[273,269,30,261,1,2,245]}
{"type":"frame","id":274,"frame":{"fn":"Writable.write","script":"56","line":237,"col":4,"scopes":[109,24]}}
{"date":1485030024224,"type":"break","frames":[274,269,30,261,1,2,245]}
{"type":"scope","id":110,"scope":{"type":"local","name":"Writable.write","vars":[261,194,122,192,193]}}
{"type":"frame","id":275,"frame":{"fn":"Writable.write","script":"56","line":239,"col":2,"scopes":[110,24]}}
{"date":1485030024238,"type":"break","frames":[275,269,30,261,1,2,245]}
{"type":"frame","id":276,"frame":{"fn":"Writable.write","script":"56","line":240,"col":4,"scopes":[110,24]}}
{"date":1485030024253,"type":"break","frames":[276,269,30,261,1,2,245]}
{"type":"scope","id":111,"scope":{"type":"local","name":"Writable.write","vars":[261,194,195,192,193]}}
{"type":"frame","id":277,"frame":{"fn":"Writable.write","script":"56","line":242,"col":2,"scopes":[111,24]}}
{"date":1485030024267,"type":"break","frames":[277,269,30,261,1,2,245]}
{"type":"frame","id":278,"frame":{"fn":"Writable.write","script":"56","line":244,"col":7,"scopes":[111,24]}}
{"date":1485030024281,"type":"break","frames":[278,269,30,261,1,2,245]}
{"type":"scope","id":112,"scope":{"type":"local","name":"validChunk","vars":[196,192,261,195,197,198]}}
{"type":"frame","id":279,"frame":{"fn":"validChunk","script":"56","line":204,"col":14,"scopes":[112,24]}}
{"type":"frame","id":280,"frame":{"fn":"Writable.write","script":"56","line":244,"col":11,"scopes":[111,24]}}
{"date":1485030024297,"type":"break","frames":[279,280,269,30,261,1,2,245]}
{"type":"scope","id":113,"scope":{"type":"local","name":"validChunk","vars":[196,192,261,195,199,198]}}
{"type":"frame","id":281,"frame":{"fn":"validChunk","script":"56","line":205,"col":11,"scopes":[113,24]}}
{"date":1485030024312,"type":"break","frames":[281,280,269,30,261,1,2,245]}
{"type":"scope","id":114,"scope":{"type":"local","name":"validChunk","vars":[196,192,261,195,199,200]}}
{"type":"frame","id":282,"frame":{"fn":"validChunk","script":"56","line":209,"col":2,"scopes":[114,24]}}
{"date":1485030024328,"type":"break","frames":[282,280,269,30,261,1,2,245]}
{"type":"frame","id":283,"frame":{"fn":"validChunk","script":"56","line":211,"col":9,"scopes":[114,24]}}
{"date":1485030024344,"type":"break","frames":[283,280,269,30,261,1,2,245]}
{"type":"frame","id":284,"frame":{"fn":"validChunk","script":"56","line":217,"col":2,"scopes":[114,24]}}
{"date":1485030024363,"type":"break","frames":[284,280,269,30,261,1,2,245]}
{"type":"frame","id":285,"frame":{"fn":"validChunk","script":"56","line":222,"col":2,"scopes":[114,24]}}
{"date":1485030024379,"type":"break","frames":[285,280,269,30,261,1,2,245]}
{"type":"frame","id":286,"frame":{"fn":"validChunk","script":"56","line":223,"col":0,"scopes":[114,24]}}
{"date":1485030024394,"type":"break","frames":[286,280,269,30,261,1,2,245]}
{"type":"frame","id":287,"frame":{"fn":"Writable.write","script":"56","line":245,"col":4,"scopes":[111,24]}}
{"date":1485030024408,"type":"break","frames":[287,269,30,261,1,2,245]}
{"type":"frame","id":288,"frame":{"fn":"Writable.write","script":"56","line":246,"col":4,"scopes":[111,24]}}
{"date":1485030024422,"type":"break","frames":[288,269,30,261,1,2,245]}
{"type":"scope","id":115,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,261,194,195,201,170,202]}}
{"type":"frame","id":289,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":2,"scopes":[115,24]}}
{"type":"frame","id":290,"frame":{"fn":"Writable.write","script":"56","line":246,"col":10,"scopes":[111,24]}}
{"date":1485030024438,"type":"break","frames":[289,290,269,30,261,1,2,245]}
{"type":"scope","id":116,"scope":{"type":"local","name":"decodeChunk","vars":[192,261,194]}}
{"type":"frame","id":291,"frame":{"fn":"decodeChunk","script":"56","line":284,"col":2,"scopes":[116,24]}}
{"type":"frame","id":292,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":10,"scopes":[115,24]}}
{"date":1485030024455,"type":"break","frames":[291,292,290,269,30,261,1,2,245]}
{"type":"frame","id":293,"frame":{"fn":"decodeChunk","script":"56","line":289,"col":2,"scopes":[116,24]}}
{"date":1485030024472,"type":"break","frames":[293,292,290,269,30,261,1,2,245]}
{"type":"frame","id":294,"frame":{"fn":"decodeChunk","script":"56","line":290,"col":0,"scopes":[116,24]}}
{"date":1485030024489,"type":"break","frames":[294,292,290,269,30,261,1,2,245]}
{"type":"frame","id":295,"frame":{"fn":"writeOrBuffer","script":"56","line":298,"col":2,"scopes":[115,24]}}
{"date":1485030024505,"type":"break","frames":[295,290,269,30,261,1,2,245]}
{"type":"frame","id":296,"frame":{"fn":"writeOrBuffer","script":"56","line":300,"col":12,"scopes":[115,24]}}
{"date":1485030024521,"type":"break","frames":[296,290,269,30,261,1,2,245]}
{"type":"scope","id":117,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,261,194,195,203,170,202]}}
{"type":"frame","id":297,"frame":{"fn":"writeOrBuffer","script":"56","line":302,"col":2,"scopes":[117,24]}}
{"date":1485030024536,"type":"break","frames":[297,290,269,30,261,1,2,245]}
{"type":"frame","id":298,"frame":{"fn":"writeOrBuffer","script":"56","line":304,"col":25,"scopes":[117,24]}}
{"date":1485030024552,"type":"break","frames":[298,290,269,30,261,1,2,245]}
{"type":"scope","id":118,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,261,194,195,203,204,202]}}
{"type":"frame","id":299,"frame":{"fn":"writeOrBuffer","script":"56","line":306,"col":2,"scopes":[118,24]}}
{"date":1485030024568,"type":"break","frames":[299,290,269,30,261,1,2,245]}
{"type":"frame","id":300,"frame":{"fn":"writeOrBuffer","script":"56","line":309,"col":2,"scopes":[118,24]}}
{"date":1485030024584,"type":"break","frames":[300,290,269,30,261,1,2,245]}
{"type":"frame","id":301,"frame":{"fn":"writeOrBuffer","script":"56","line":319,"col":4,"scopes":[118,24]}}
{"date":1485030024600,"type":"break","frames":[301,290,269,30,261,1,2,245]}
{"type":"scope","id":119,"scope":{"type":"local","name":"doWrite","vars":[196,192,205,203,261,194,195]}}
{"type":"frame","id":302,"frame":{"fn":"doWrite","script":"56","line":326,"col":2,"scopes":[119,24]}}
{"date":1485030024617,"type":"break","frames":[302,301,290,269,30,261,1,2,245]}
{"type":"frame","id":303,"frame":{"fn":"doWrite","script":"56","line":327,"col":2,"scopes":[119,24]}}
{"date":1485030024634,"type":"break","frames":[303,301,290,269,30,261,1,2,245]}
{"type":"frame","id":304,"frame":{"fn":"doWrite","script":"56","line":328,"col":2,"scopes":[119,24]}}
{"date":1485030024652,"type":"break","frames":[304,301,290,269,30,261,1,2,245]}
{"type":"frame","id":305,"frame":{"fn":"doWrite","script":"56","line":329,"col":2,"scopes":[119,24]}}
{"date":1485030024670,"type":"break","frames":[305,301,290,269,30,261,1,2,245]}
{"type":"frame","id":306,"frame":{"fn":"doWrite","script":"56","line":330,"col":2,"scopes":[119,24]}}
{"date":1485030024687,"type":"break","frames":[306,301,290,269,30,261,1,2,245]}
{"type":"frame","id":307,"frame":{"fn":"doWrite","script":"56","line":333,"col":4,"scopes":[119,24]}}
{"date":1485030024705,"type":"break","frames":[307,301,290,269,30,261,1,2,245]}
{"type":"var","id":262,"name":"data","val":"time:     20:20:23\n"}
{"type":"scope","id":120,"scope":{"type":"local","name":"Socket._write","vars":[262,194,195]}}
{"type":"frame","id":308,"frame":{"fn":"Socket._write","script":"63","line":730,"col":2,"scopes":[120,22]}}
{"type":"frame","id":309,"frame":{"fn":"doWrite","script":"56","line":333,"col":11,"scopes":[119,24]}}
{"date":1485030024725,"type":"break","frames":[308,309,301,290,269,30,261,1,2,245]}
{"type":"scope","id":121,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[207,208,209,80,210,211,195,194,262,205]}}
{"type":"frame","id":310,"frame":{"fn":"Socket._writeGeneric","script":"63","line":665,"col":2,"scopes":[121,22]}}
{"type":"frame","id":311,"frame":{"fn":"Socket._write","script":"63","line":730,"col":7,"scopes":[120,22]}}
{"date":1485030024752,"type":"break","frames":[310,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":312,"frame":{"fn":"Socket._writeGeneric","script":"63","line":673,"col":2,"scopes":[121,22]}}
{"date":1485030024776,"type":"break","frames":[312,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":313,"frame":{"fn":"Socket._writeGeneric","script":"63","line":674,"col":2,"scopes":[121,22]}}
{"date":1485030024799,"type":"break","frames":[313,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":314,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":2,"scopes":[121,22]}}
{"date":1485030024822,"type":"break","frames":[314,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":315,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":7,"scopes":[121,22]}}
{"date":1485030024848,"type":"break","frames":[79,315,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030024875,"type":"break","frames":[81,315,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030024900,"type":"break","frames":[82,315,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":316,"frame":{"fn":"Socket._writeGeneric","script":"63","line":678,"col":2,"scopes":[121,22]}}
{"date":1485030024924,"type":"break","frames":[316,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":317,"frame":{"fn":"Socket._writeGeneric","script":"63","line":683,"col":12,"scopes":[121,22]}}
{"date":1485030024949,"type":"break","frames":[317,311,309,301,290,269,30,261,1,2,245]}
{"type":"scope","id":122,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,211,195,194,262,205]}}
{"type":"frame","id":318,"frame":{"fn":"Socket._writeGeneric","script":"63","line":684,"col":2,"scopes":[122,22]}}
{"date":1485030024974,"type":"break","frames":[318,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":319,"frame":{"fn":"Socket._writeGeneric","script":"63","line":685,"col":2,"scopes":[122,22]}}
{"date":1485030025000,"type":"break","frames":[319,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":320,"frame":{"fn":"Socket._writeGeneric","script":"63","line":686,"col":2,"scopes":[122,22]}}
{"date":1485030025025,"type":"break","frames":[320,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":321,"frame":{"fn":"Socket._writeGeneric","script":"63","line":689,"col":2,"scopes":[122,22]}}
{"date":1485030025048,"type":"break","frames":[321,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":322,"frame":{"fn":"Socket._writeGeneric","script":"63","line":702,"col":4,"scopes":[122,22]}}
{"date":1485030025072,"type":"break","frames":[322,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":323,"frame":{"fn":"Socket._writeGeneric","script":"63","line":705,"col":6,"scopes":[122,22]}}
{"date":1485030025098,"type":"break","frames":[323,311,309,301,290,269,30,261,1,2,245]}
{"type":"scope","id":123,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,216,195,194,262,205]}}
{"type":"frame","id":324,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":4,"scopes":[123,22]}}
{"date":1485030025121,"type":"break","frames":[324,311,309,301,290,269,30,261,1,2,245]}
{"type":"scope","id":124,"scope":{"type":"local","name":"createWriteReq","vars":[215,217,262,194]}}
{"type":"frame","id":325,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":10,"scopes":[124,22]}}
{"type":"frame","id":326,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":10,"scopes":[123,22]}}
{"date":1485030025148,"type":"break","frames":[325,326,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":327,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":2,"scopes":[124,22]}}
{"date":1485030025176,"type":"break","frames":[327,326,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":328,"frame":{"fn":"createWriteReq","script":"63","line":744,"col":6,"scopes":[124,22]}}
{"date":1485030025202,"type":"break","frames":[328,326,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":329,"frame":{"fn":"createWriteReq","script":"63","line":758,"col":0,"scopes":[124,22]}}
{"date":1485030025228,"type":"break","frames":[329,326,311,309,301,290,269,30,261,1,2,245]}
{"type":"scope","id":125,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,218,209,80,210,216,195,194,262,205]}}
{"type":"frame","id":330,"frame":{"fn":"Socket._writeGeneric","script":"63","line":710,"col":2,"scopes":[125,22]}}
{"date":1485030025252,"type":"break","frames":[330,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":331,"frame":{"fn":"Socket._writeGeneric","script":"63","line":713,"col":2,"scopes":[125,22]}}
{"date":1485030025276,"type":"break","frames":[331,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":332,"frame":{"fn":"Socket._writeGeneric","script":"63","line":717,"col":2,"scopes":[125,22]}}
{"date":1485030025299,"type":"break","frames":[332,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":333,"frame":{"fn":"Socket._writeGeneric","script":"63","line":720,"col":4,"scopes":[125,22]}}
{"date":1485030025322,"type":"break","frames":[333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025347,"type":"break","frames":[101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025374,"type":"break","frames":[102,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025400,"type":"break","frames":[103,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025427,"type":"break","frames":[104,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025459,"type":"break","frames":[105,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025488,"type":"break","frames":[106,105,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025517,"type":"break","frames":[107,105,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025548,"type":"break","frames":[108,105,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025578,"type":"break","frames":[109,105,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025609,"type":"break","frames":[110,105,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025638,"type":"break","frames":[111,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025667,"type":"break","frames":[112,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025696,"type":"break","frames":[113,112,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025725,"type":"break","frames":[114,112,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025752,"type":"break","frames":[115,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025781,"type":"break","frames":[116,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025813,"type":"break","frames":[117,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025841,"type":"break","frames":[118,101,333,311,309,301,290,269,30,261,1,2,245]}
{"date":1485030025867,"type":"break","frames":[119,333,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":334,"frame":{"fn":"Socket._writeGeneric","script":"63","line":721,"col":0,"scopes":[125,22]}}
{"date":1485030025890,"type":"break","frames":[334,311,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":335,"frame":{"fn":"Socket._write","script":"63","line":731,"col":0,"scopes":[120,22]}}
{"date":1485030025911,"type":"break","frames":[335,309,301,290,269,30,261,1,2,245]}
{"type":"frame","id":336,"frame":{"fn":"doWrite","script":"56","line":334,"col":2,"scopes":[119,24]}}
{"date":1485030025929,"type":"break","frames":[336,301,290,269,30,261,1,2,245]}
{"type":"frame","id":337,"frame":{"fn":"doWrite","script":"56","line":335,"col":0,"scopes":[119,24]}}
{"date":1485030025947,"type":"break","frames":[337,301,290,269,30,261,1,2,245]}
{"type":"frame","id":338,"frame":{"fn":"writeOrBuffer","script":"56","line":322,"col":2,"scopes":[118,24]}}
{"date":1485030025963,"type":"break","frames":[338,290,269,30,261,1,2,245]}
{"type":"frame","id":339,"frame":{"fn":"writeOrBuffer","script":"56","line":323,"col":0,"scopes":[118,24]}}
{"date":1485030025979,"type":"break","frames":[339,290,269,30,261,1,2,245]}
{"type":"scope","id":126,"scope":{"type":"local","name":"Writable.write","vars":[261,194,195,192,204]}}
{"type":"frame","id":340,"frame":{"fn":"Writable.write","script":"56","line":249,"col":2,"scopes":[126,24]}}
{"date":1485030025993,"type":"break","frames":[340,269,30,261,1,2,245]}
{"type":"frame","id":341,"frame":{"fn":"Writable.write","script":"56","line":250,"col":0,"scopes":[126,24]}}
{"date":1485030026008,"type":"break","frames":[341,269,30,261,1,2,245]}
{"type":"frame","id":342,"frame":{"fn":"Socket.write","script":"63","line":658,"col":0,"scopes":[106,22]}}
{"date":1485030026021,"type":"break","frames":[342,30,261,1,2,245]}
{"date":1485030026031,"type":"break","frames":[129,261,1,2,245]}
{"type":"frame","id":343,"frame":{"fn":"onInterval","script":"60","line":10,"col":0,"scopes":[103,1]}}
{"date":1485030026040,"type":"break","frames":[343,1,2,245]}
{"date":1485030026051,"type":"break","frames":[131,132,133]}
{"date":1485030026058,"type":"break","frames":[134,132,133]}
{"date":1485030026065,"type":"break","frames":[135,134,132,133]}
{"date":1485030026073,"type":"break","frames":[136,134,132,133]}
{"date":1485030026080,"type":"break","frames":[137,132,133]}
{"date":1485030026086,"type":"break","frames":[138,132,133]}
{"date":1485030026094,"type":"break","frames":[139,138,132,133]}
{"date":1485030026100,"type":"break","frames":[140,132,133]}
{"date":1485030026108,"type":"break","frames":[141,140,132,133]}
{"date":1485030026117,"type":"break","frames":[113,141,140,132,133]}
{"date":1485030026127,"type":"break","frames":[114,141,140,132,133]}
{"date":1485030026135,"type":"break","frames":[142,140,132,133]}
{"date":1485030026142,"type":"break","frames":[143,140,132,133]}
{"date":1485030026150,"type":"break","frames":[144,140,132,133]}
{"date":1485030026157,"type":"break","frames":[145,132,133]}
{"type":"var","id":263,"name":"now","val":32805}
{"type":"var","id":264,"name":"diff","val":1003}
{"type":"scope","id":127,"scope":{"type":"local","name":"listOnTimeout","vars":[36,38,263,264,3,41,42]}}
{"type":"frame","id":344,"frame":{"fn":"listOnTimeout","script":"40","line":206,"col":4,"scopes":[127,3]}}
{"date":1485030027061,"type":"break","frames":[0,1,2,344]}
{"type":"var","id":265,"name":"time","val":"20:20:27"}
{"type":"scope","id":128,"scope":{"type":"local","name":"onInterval","vars":[265,1]}}
{"type":"frame","id":345,"frame":{"fn":"onInterval","script":"60","line":8,"col":17,"scopes":[128,1]}}
{"date":1485030027070,"type":"break","frames":[345,1,2,344]}
{"type":"var","id":266,"name":"s","val":"20:20:27"}
{"type":"scope","id":129,"scope":{"type":"local","name":"leftPad","vars":[266,45]}}
{"type":"frame","id":346,"frame":{"fn":"leftPad","script":"60","line":13,"col":2,"scopes":[129,1]}}
{"date":1485030027079,"type":"break","frames":[346,345,1,2,344]}
{"type":"frame","id":347,"frame":{"fn":"leftPad","script":"60","line":15,"col":2,"scopes":[129,1]}}
{"date":1485030027089,"type":"break","frames":[347,345,1,2,344]}
{"type":"frame","id":348,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[129,1]}}
{"date":1485030027099,"type":"break","frames":[348,345,1,2,344]}
{"type":"frame","id":349,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[129,1]}}
{"date":1485030027108,"type":"break","frames":[349,345,1,2,344]}
{"type":"var","id":267,"name":"s","val":" 20:20:27"}
{"type":"scope","id":130,"scope":{"type":"local","name":"leftPad","vars":[267,45]}}
{"type":"frame","id":350,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[130,1]}}
{"date":1485030027118,"type":"break","frames":[350,345,1,2,344]}
{"type":"frame","id":351,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[130,1]}}
{"date":1485030027127,"type":"break","frames":[351,345,1,2,344]}
{"type":"var","id":268,"name":"s","val":"  20:20:27"}
{"type":"scope","id":131,"scope":{"type":"local","name":"leftPad","vars":[268,45]}}
{"type":"frame","id":352,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[131,1]}}
{"date":1485030027137,"type":"break","frames":[352,345,1,2,344]}
{"type":"frame","id":353,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[131,1]}}
{"date":1485030027146,"type":"break","frames":[353,345,1,2,344]}
{"type":"var","id":269,"name":"s","val":"   20:20:27"}
{"type":"scope","id":132,"scope":{"type":"local","name":"leftPad","vars":[269,45]}}
{"type":"frame","id":354,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[132,1]}}
{"date":1485030027155,"type":"break","frames":[354,345,1,2,344]}
{"type":"frame","id":355,"frame":{"fn":"leftPad","script":"60","line":18,"col":4,"scopes":[132,1]}}
{"date":1485030027164,"type":"break","frames":[355,345,1,2,344]}
{"type":"var","id":270,"name":"s","val":"    20:20:27"}
{"type":"scope","id":133,"scope":{"type":"local","name":"leftPad","vars":[270,45]}}
{"type":"frame","id":356,"frame":{"fn":"leftPad","script":"60","line":17,"col":18,"scopes":[133,1]}}
{"date":1485030027173,"type":"break","frames":[356,345,1,2,344]}
{"type":"frame","id":357,"frame":{"fn":"leftPad","script":"60","line":21,"col":2,"scopes":[133,1]}}
{"date":1485030027184,"type":"break","frames":[357,345,1,2,344]}
{"type":"frame","id":358,"frame":{"fn":"leftPad","script":"60","line":22,"col":0,"scopes":[133,1]}}
{"date":1485030027193,"type":"break","frames":[358,345,1,2,344]}
{"type":"var","id":271,"name":"padded","val":"    20:20:27"}
{"type":"scope","id":134,"scope":{"type":"local","name":"onInterval","vars":[265,271]}}
{"type":"frame","id":359,"frame":{"fn":"onInterval","script":"60","line":9,"col":2,"scopes":[134,1]}}
{"date":1485030027202,"type":"break","frames":[359,1,2,344]}
{"date":1485030027212,"type":"break","frames":[19,359,1,2,344]}
{"date":1485030027222,"type":"break","frames":[20,359,1,2,344]}
{"date":1485030027232,"type":"break","frames":[21,359,1,2,344]}
{"type":"frame","id":360,"frame":{"fn":"onInterval","script":"60","line":9,"col":10,"scopes":[134,1]}}
{"date":1485030027241,"type":"break","frames":[22,360,1,2,344]}
{"type":"var","id":272,"name":"f","val":"time:     20:20:27"}
{"type":"scope","id":135,"scope":{"type":"local","name":"exports.format","vars":[272,74,75,76,77,78,79,80]}}
{"type":"frame","id":361,"frame":{"fn":"exports.format","script":"37","line":68,"col":2,"scopes":[135,19]}}
{"date":1485030027253,"type":"break","frames":[361,25,360,1,2,344]}
{"type":"frame","id":362,"frame":{"fn":"exports.format","script":"37","line":76,"col":24,"scopes":[135,19]}}
{"date":1485030027265,"type":"break","frames":[362,25,360,1,2,344]}
{"type":"scope","id":136,"scope":{"type":"local","name":"exports.format","vars":[272,74,75,119,77,78,79,80]}}
{"type":"frame","id":363,"frame":{"fn":"exports.format","script":"37","line":78,"col":2,"scopes":[136,19]}}
{"date":1485030027277,"type":"break","frames":[363,25,360,1,2,344]}
{"type":"frame","id":364,"frame":{"fn":"exports.format","script":"37","line":133,"col":0,"scopes":[136,19]}}
{"date":1485030027288,"type":"break","frames":[364,25,360,1,2,344]}
{"type":"var","id":273,"name":"chunk","val":"time:     20:20:27\n"}
{"type":"scope","id":137,"scope":{"type":"local","name":"Socket.write","vars":[273,121,122,74]}}
{"type":"frame","id":365,"frame":{"fn":"Socket.write","script":"63","line":653,"col":2,"scopes":[137,22]}}
{"date":1485030027300,"type":"break","frames":[365,30,360,1,2,344]}
{"type":"frame","id":366,"frame":{"fn":"Socket.write","script":"63","line":657,"col":2,"scopes":[137,22]}}
{"date":1485030027316,"type":"break","frames":[366,30,360,1,2,344]}
{"type":"scope","id":138,"scope":{"type":"local","name":"Writable.write","vars":[273,121,122,169,170]}}
{"type":"frame","id":367,"frame":{"fn":"Writable.write","script":"56","line":226,"col":18,"scopes":[138,24]}}
{"type":"frame","id":368,"frame":{"fn":"Socket.write","script":"63","line":657,"col":39,"scopes":[137,22]}}
{"date":1485030027330,"type":"break","frames":[367,368,30,360,1,2,344]}
{"type":"scope","id":139,"scope":{"type":"local","name":"Writable.write","vars":[273,121,122,192,170]}}
{"type":"frame","id":369,"frame":{"fn":"Writable.write","script":"56","line":227,"col":12,"scopes":[139,24]}}
{"date":1485030027344,"type":"break","frames":[369,368,30,360,1,2,344]}
{"type":"scope","id":140,"scope":{"type":"local","name":"Writable.write","vars":[273,121,122,192,193]}}
{"type":"frame","id":370,"frame":{"fn":"Writable.write","script":"56","line":229,"col":2,"scopes":[140,24]}}
{"date":1485030027360,"type":"break","frames":[370,368,30,360,1,2,344]}
{"type":"frame","id":371,"frame":{"fn":"Writable.write","script":"56","line":234,"col":2,"scopes":[140,24]}}
{"date":1485030027374,"type":"break","frames":[371,368,30,360,1,2,344]}
{"type":"frame","id":372,"frame":{"fn":"Writable.write","script":"56","line":236,"col":7,"scopes":[140,24]}}
{"date":1485030027388,"type":"break","frames":[372,368,30,360,1,2,344]}
{"type":"frame","id":373,"frame":{"fn":"Writable.write","script":"56","line":237,"col":4,"scopes":[140,24]}}
{"date":1485030027401,"type":"break","frames":[373,368,30,360,1,2,344]}
{"type":"scope","id":141,"scope":{"type":"local","name":"Writable.write","vars":[273,194,122,192,193]}}
{"type":"frame","id":374,"frame":{"fn":"Writable.write","script":"56","line":239,"col":2,"scopes":[141,24]}}
{"date":1485030027415,"type":"break","frames":[374,368,30,360,1,2,344]}
{"type":"frame","id":375,"frame":{"fn":"Writable.write","script":"56","line":240,"col":4,"scopes":[141,24]}}
{"date":1485030027429,"type":"break","frames":[375,368,30,360,1,2,344]}
{"type":"scope","id":142,"scope":{"type":"local","name":"Writable.write","vars":[273,194,195,192,193]}}
{"type":"frame","id":376,"frame":{"fn":"Writable.write","script":"56","line":242,"col":2,"scopes":[142,24]}}
{"date":1485030027443,"type":"break","frames":[376,368,30,360,1,2,344]}
{"type":"frame","id":377,"frame":{"fn":"Writable.write","script":"56","line":244,"col":7,"scopes":[142,24]}}
{"date":1485030027457,"type":"break","frames":[377,368,30,360,1,2,344]}
{"type":"scope","id":143,"scope":{"type":"local","name":"validChunk","vars":[196,192,273,195,197,198]}}
{"type":"frame","id":378,"frame":{"fn":"validChunk","script":"56","line":204,"col":14,"scopes":[143,24]}}
{"type":"frame","id":379,"frame":{"fn":"Writable.write","script":"56","line":244,"col":11,"scopes":[142,24]}}
{"date":1485030027472,"type":"break","frames":[378,379,368,30,360,1,2,344]}
{"type":"scope","id":144,"scope":{"type":"local","name":"validChunk","vars":[196,192,273,195,199,198]}}
{"type":"frame","id":380,"frame":{"fn":"validChunk","script":"56","line":205,"col":11,"scopes":[144,24]}}
{"date":1485030027488,"type":"break","frames":[380,379,368,30,360,1,2,344]}
{"type":"scope","id":145,"scope":{"type":"local","name":"validChunk","vars":[196,192,273,195,199,200]}}
{"type":"frame","id":381,"frame":{"fn":"validChunk","script":"56","line":209,"col":2,"scopes":[145,24]}}
{"date":1485030027504,"type":"break","frames":[381,379,368,30,360,1,2,344]}
{"type":"frame","id":382,"frame":{"fn":"validChunk","script":"56","line":211,"col":9,"scopes":[145,24]}}
{"date":1485030027519,"type":"break","frames":[382,379,368,30,360,1,2,344]}
{"type":"frame","id":383,"frame":{"fn":"validChunk","script":"56","line":217,"col":2,"scopes":[145,24]}}
{"date":1485030027534,"type":"break","frames":[383,379,368,30,360,1,2,344]}
{"type":"frame","id":384,"frame":{"fn":"validChunk","script":"56","line":222,"col":2,"scopes":[145,24]}}
{"date":1485030027550,"type":"break","frames":[384,379,368,30,360,1,2,344]}
{"type":"frame","id":385,"frame":{"fn":"validChunk","script":"56","line":223,"col":0,"scopes":[145,24]}}
{"date":1485030027565,"type":"break","frames":[385,379,368,30,360,1,2,344]}
{"type":"frame","id":386,"frame":{"fn":"Writable.write","script":"56","line":245,"col":4,"scopes":[142,24]}}
{"date":1485030027579,"type":"break","frames":[386,368,30,360,1,2,344]}
{"type":"frame","id":387,"frame":{"fn":"Writable.write","script":"56","line":246,"col":4,"scopes":[142,24]}}
{"date":1485030027594,"type":"break","frames":[387,368,30,360,1,2,344]}
{"type":"scope","id":146,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,273,194,195,201,170,202]}}
{"type":"frame","id":388,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":2,"scopes":[146,24]}}
{"type":"frame","id":389,"frame":{"fn":"Writable.write","script":"56","line":246,"col":10,"scopes":[142,24]}}
{"date":1485030027609,"type":"break","frames":[388,389,368,30,360,1,2,344]}
{"type":"scope","id":147,"scope":{"type":"local","name":"decodeChunk","vars":[192,273,194]}}
{"type":"frame","id":390,"frame":{"fn":"decodeChunk","script":"56","line":284,"col":2,"scopes":[147,24]}}
{"type":"frame","id":391,"frame":{"fn":"writeOrBuffer","script":"56","line":296,"col":10,"scopes":[146,24]}}
{"date":1485030027627,"type":"break","frames":[390,391,389,368,30,360,1,2,344]}
{"type":"frame","id":392,"frame":{"fn":"decodeChunk","script":"56","line":289,"col":2,"scopes":[147,24]}}
{"date":1485030027644,"type":"break","frames":[392,391,389,368,30,360,1,2,344]}
{"type":"frame","id":393,"frame":{"fn":"decodeChunk","script":"56","line":290,"col":0,"scopes":[147,24]}}
{"date":1485030027663,"type":"break","frames":[393,391,389,368,30,360,1,2,344]}
{"type":"frame","id":394,"frame":{"fn":"writeOrBuffer","script":"56","line":298,"col":2,"scopes":[146,24]}}
{"date":1485030027679,"type":"break","frames":[394,389,368,30,360,1,2,344]}
{"type":"frame","id":395,"frame":{"fn":"writeOrBuffer","script":"56","line":300,"col":12,"scopes":[146,24]}}
{"date":1485030027695,"type":"break","frames":[395,389,368,30,360,1,2,344]}
{"type":"scope","id":148,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,273,194,195,203,170,202]}}
{"type":"frame","id":396,"frame":{"fn":"writeOrBuffer","script":"56","line":302,"col":2,"scopes":[148,24]}}
{"date":1485030027711,"type":"break","frames":[396,389,368,30,360,1,2,344]}
{"type":"frame","id":397,"frame":{"fn":"writeOrBuffer","script":"56","line":304,"col":25,"scopes":[148,24]}}
{"date":1485030027730,"type":"break","frames":[397,389,368,30,360,1,2,344]}
{"type":"scope","id":149,"scope":{"type":"local","name":"writeOrBuffer","vars":[196,192,273,194,195,203,204,202]}}
{"type":"frame","id":398,"frame":{"fn":"writeOrBuffer","script":"56","line":306,"col":2,"scopes":[149,24]}}
{"date":1485030027746,"type":"break","frames":[398,389,368,30,360,1,2,344]}
{"type":"frame","id":399,"frame":{"fn":"writeOrBuffer","script":"56","line":309,"col":2,"scopes":[149,24]}}
{"date":1485030027762,"type":"break","frames":[399,389,368,30,360,1,2,344]}
{"type":"frame","id":400,"frame":{"fn":"writeOrBuffer","script":"56","line":319,"col":4,"scopes":[149,24]}}
{"date":1485030027777,"type":"break","frames":[400,389,368,30,360,1,2,344]}
{"type":"scope","id":150,"scope":{"type":"local","name":"doWrite","vars":[196,192,205,203,273,194,195]}}
{"type":"frame","id":401,"frame":{"fn":"doWrite","script":"56","line":326,"col":2,"scopes":[150,24]}}
{"date":1485030027795,"type":"break","frames":[401,400,389,368,30,360,1,2,344]}
{"type":"frame","id":402,"frame":{"fn":"doWrite","script":"56","line":327,"col":2,"scopes":[150,24]}}
{"date":1485030027812,"type":"break","frames":[402,400,389,368,30,360,1,2,344]}
{"type":"frame","id":403,"frame":{"fn":"doWrite","script":"56","line":328,"col":2,"scopes":[150,24]}}
{"date":1485030027829,"type":"break","frames":[403,400,389,368,30,360,1,2,344]}
{"type":"frame","id":404,"frame":{"fn":"doWrite","script":"56","line":329,"col":2,"scopes":[150,24]}}
{"date":1485030027847,"type":"break","frames":[404,400,389,368,30,360,1,2,344]}
{"type":"frame","id":405,"frame":{"fn":"doWrite","script":"56","line":330,"col":2,"scopes":[150,24]}}
{"date":1485030027865,"type":"break","frames":[405,400,389,368,30,360,1,2,344]}
{"type":"frame","id":406,"frame":{"fn":"doWrite","script":"56","line":333,"col":4,"scopes":[150,24]}}
{"date":1485030027882,"type":"break","frames":[406,400,389,368,30,360,1,2,344]}
{"type":"var","id":274,"name":"data","val":"time:     20:20:27\n"}
{"type":"scope","id":151,"scope":{"type":"local","name":"Socket._write","vars":[274,194,195]}}
{"type":"frame","id":407,"frame":{"fn":"Socket._write","script":"63","line":730,"col":2,"scopes":[151,22]}}
{"type":"frame","id":408,"frame":{"fn":"doWrite","script":"56","line":333,"col":11,"scopes":[150,24]}}
{"date":1485030027902,"type":"break","frames":[407,408,400,389,368,30,360,1,2,344]}
{"type":"scope","id":152,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[207,208,209,80,210,211,195,194,274,205]}}
{"type":"frame","id":409,"frame":{"fn":"Socket._writeGeneric","script":"63","line":665,"col":2,"scopes":[152,22]}}
{"type":"frame","id":410,"frame":{"fn":"Socket._write","script":"63","line":730,"col":7,"scopes":[151,22]}}
{"date":1485030027926,"type":"break","frames":[409,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":411,"frame":{"fn":"Socket._writeGeneric","script":"63","line":673,"col":2,"scopes":[152,22]}}
{"date":1485030027949,"type":"break","frames":[411,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":412,"frame":{"fn":"Socket._writeGeneric","script":"63","line":674,"col":2,"scopes":[152,22]}}
{"date":1485030027975,"type":"break","frames":[412,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":413,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":2,"scopes":[152,22]}}
{"date":1485030027998,"type":"break","frames":[413,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":414,"frame":{"fn":"Socket._writeGeneric","script":"63","line":676,"col":7,"scopes":[152,22]}}
{"date":1485030028026,"type":"break","frames":[79,414,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028052,"type":"break","frames":[81,414,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028078,"type":"break","frames":[82,414,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":415,"frame":{"fn":"Socket._writeGeneric","script":"63","line":678,"col":2,"scopes":[152,22]}}
{"date":1485030028105,"type":"break","frames":[415,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":416,"frame":{"fn":"Socket._writeGeneric","script":"63","line":683,"col":12,"scopes":[152,22]}}
{"date":1485030028128,"type":"break","frames":[416,410,408,400,389,368,30,360,1,2,344]}
{"type":"scope","id":153,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,211,195,194,274,205]}}
{"type":"frame","id":417,"frame":{"fn":"Socket._writeGeneric","script":"63","line":684,"col":2,"scopes":[153,22]}}
{"date":1485030028152,"type":"break","frames":[417,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":418,"frame":{"fn":"Socket._writeGeneric","script":"63","line":685,"col":2,"scopes":[153,22]}}
{"date":1485030028176,"type":"break","frames":[418,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":419,"frame":{"fn":"Socket._writeGeneric","script":"63","line":686,"col":2,"scopes":[153,22]}}
{"date":1485030028199,"type":"break","frames":[419,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":420,"frame":{"fn":"Socket._writeGeneric","script":"63","line":689,"col":2,"scopes":[153,22]}}
{"date":1485030028223,"type":"break","frames":[420,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":421,"frame":{"fn":"Socket._writeGeneric","script":"63","line":702,"col":4,"scopes":[153,22]}}
{"date":1485030028246,"type":"break","frames":[421,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":422,"frame":{"fn":"Socket._writeGeneric","script":"63","line":705,"col":6,"scopes":[153,22]}}
{"date":1485030028269,"type":"break","frames":[422,410,408,400,389,368,30,360,1,2,344]}
{"type":"scope","id":154,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,208,209,80,210,216,195,194,274,205]}}
{"type":"frame","id":423,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":4,"scopes":[154,22]}}
{"date":1485030028293,"type":"break","frames":[423,410,408,400,389,368,30,360,1,2,344]}
{"type":"scope","id":155,"scope":{"type":"local","name":"createWriteReq","vars":[215,217,274,194]}}
{"type":"frame","id":424,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":10,"scopes":[155,22]}}
{"type":"frame","id":425,"frame":{"fn":"Socket._writeGeneric","script":"63","line":707,"col":10,"scopes":[154,22]}}
{"date":1485030028321,"type":"break","frames":[424,425,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":426,"frame":{"fn":"createWriteReq","script":"63","line":734,"col":2,"scopes":[155,22]}}
{"date":1485030028349,"type":"break","frames":[426,425,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":427,"frame":{"fn":"createWriteReq","script":"63","line":744,"col":6,"scopes":[155,22]}}
{"date":1485030028375,"type":"break","frames":[427,425,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":428,"frame":{"fn":"createWriteReq","script":"63","line":758,"col":0,"scopes":[155,22]}}
{"date":1485030028401,"type":"break","frames":[428,425,410,408,400,389,368,30,360,1,2,344]}
{"type":"scope","id":156,"scope":{"type":"local","name":"Socket._writeGeneric","vars":[215,218,209,80,210,216,195,194,274,205]}}
{"type":"frame","id":429,"frame":{"fn":"Socket._writeGeneric","script":"63","line":710,"col":2,"scopes":[156,22]}}
{"date":1485030028425,"type":"break","frames":[429,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":430,"frame":{"fn":"Socket._writeGeneric","script":"63","line":713,"col":2,"scopes":[156,22]}}
{"date":1485030028452,"type":"break","frames":[430,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":431,"frame":{"fn":"Socket._writeGeneric","script":"63","line":717,"col":2,"scopes":[156,22]}}
{"date":1485030028475,"type":"break","frames":[431,410,408,400,389,368,30,360,1,2,344]}
{"type":"frame","id":432,"frame":{"fn":"Socket._writeGeneric","script":"63","line":720,"col":4,"scopes":[156,22]}}
{"date":1485030028498,"type":"break","frames":[432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028523,"type":"break","frames":[101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028552,"type":"break","frames":[102,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028580,"type":"break","frames":[103,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028608,"type":"break","frames":[104,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028637,"type":"break","frames":[105,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028667,"type":"break","frames":[106,105,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028698,"type":"break","frames":[107,105,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028730,"type":"break","frames":[108,105,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028760,"type":"break","frames":[109,105,101,432,410,408,400,389,368,30,360,1,2,344]}
{"date":1485030028788,"type":"break","frames":[110,105,101,432,410,408,400,389,368,30,360,1,2,344]}
